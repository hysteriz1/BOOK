// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/m16_z/app/ent/book"
	"github.com/m16_z/app/ent/bookstatus"
)

// BookstatusCreate is the builder for creating a Bookstatus entity.
type BookstatusCreate struct {
	config
	mutation *BookstatusMutation
	hooks    []Hook
}

// SetBOOKSTATUSDATA sets the BOOKSTATUSDATA field.
func (bc *BookstatusCreate) SetBOOKSTATUSDATA(s string) *BookstatusCreate {
	bc.mutation.SetBOOKSTATUSDATA(s)
	return bc
}

// AddBOOKSTATUSBOOKIDs adds the BOOKSTATUS_BOOK edge to Book by ids.
func (bc *BookstatusCreate) AddBOOKSTATUSBOOKIDs(ids ...int) *BookstatusCreate {
	bc.mutation.AddBOOKSTATUSBOOKIDs(ids...)
	return bc
}

// AddBOOKSTATUSBOOK adds the BOOKSTATUS_BOOK edges to Book.
func (bc *BookstatusCreate) AddBOOKSTATUSBOOK(b ...*Book) *BookstatusCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bc.AddBOOKSTATUSBOOKIDs(ids...)
}

// Mutation returns the BookstatusMutation object of the builder.
func (bc *BookstatusCreate) Mutation() *BookstatusMutation {
	return bc.mutation
}

// Save creates the Bookstatus in the database.
func (bc *BookstatusCreate) Save(ctx context.Context) (*Bookstatus, error) {
	if _, ok := bc.mutation.BOOKSTATUSDATA(); !ok {
		return nil, &ValidationError{Name: "BOOKSTATUSDATA", err: errors.New("ent: missing required field \"BOOKSTATUSDATA\"")}
	}
	if v, ok := bc.mutation.BOOKSTATUSDATA(); ok {
		if err := bookstatus.BOOKSTATUSDATAValidator(v); err != nil {
			return nil, &ValidationError{Name: "BOOKSTATUSDATA", err: fmt.Errorf("ent: validator failed for field \"BOOKSTATUSDATA\": %w", err)}
		}
	}
	var (
		err  error
		node *Bookstatus
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookstatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookstatusCreate) SaveX(ctx context.Context) *Bookstatus {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BookstatusCreate) sqlSave(ctx context.Context) (*Bookstatus, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BookstatusCreate) createSpec() (*Bookstatus, *sqlgraph.CreateSpec) {
	var (
		b     = &Bookstatus{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: bookstatus.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookstatus.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.BOOKSTATUSDATA(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookstatus.FieldBOOKSTATUSDATA,
		})
		b.BOOKSTATUSDATA = value
	}
	if nodes := bc.mutation.BOOKSTATUSBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bookstatus.BOOKSTATUSBOOKTable,
			Columns: []string{bookstatus.BOOKSTATUSBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
