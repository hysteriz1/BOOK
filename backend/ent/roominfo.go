// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/m16_z/app/ent/roominfo"
)

// RoomInfo is the model entity for the RoomInfo schema.
type RoomInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// INFOBED holds the value of the "INFOBED" field.
	INFOBED int `json:"INFOBED,omitempty"`
	// INFOREFRIGERAT holds the value of the "INFOREFRIGERAT" field.
	INFOREFRIGERAT int `json:"INFOREFRIGERAT,omitempty"`
	// INFOWARDROB holds the value of the "INFOWARDROB" field.
	INFOWARDROB int `json:"INFOWARDROB,omitempty"`
	// INFOOFFICEDE holds the value of the "INFOOFFICEDE" field.
	INFOOFFICEDE int `json:"INFOOFFICEDE,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomInfoQuery when eager-loading is set.
	Edges RoomInfoEdges `json:"edges"`
}

// RoomInfoEdges holds the relations/edges for other nodes in the graph.
type RoomInfoEdges struct {
	// INFOROOM holds the value of the INFO_ROOM edge.
	INFOROOM []*Room
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// INFOROOMOrErr returns the INFOROOM value or an error if the edge
// was not loaded in eager-loading.
func (e RoomInfoEdges) INFOROOMOrErr() ([]*Room, error) {
	if e.loadedTypes[0] {
		return e.INFOROOM, nil
	}
	return nil, &NotLoadedError{edge: "INFO_ROOM"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoomInfo) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullInt64{}, // INFOBED
		&sql.NullInt64{}, // INFOREFRIGERAT
		&sql.NullInt64{}, // INFOWARDROB
		&sql.NullInt64{}, // INFOOFFICEDE
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoomInfo fields.
func (ri *RoomInfo) assignValues(values ...interface{}) error {
	if m, n := len(values), len(roominfo.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ri.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field INFOBED", values[0])
	} else if value.Valid {
		ri.INFOBED = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field INFOREFRIGERAT", values[1])
	} else if value.Valid {
		ri.INFOREFRIGERAT = int(value.Int64)
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field INFOWARDROB", values[2])
	} else if value.Valid {
		ri.INFOWARDROB = int(value.Int64)
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field INFOOFFICEDE", values[3])
	} else if value.Valid {
		ri.INFOOFFICEDE = int(value.Int64)
	}
	return nil
}

// QueryINFOROOM queries the INFO_ROOM edge of the RoomInfo.
func (ri *RoomInfo) QueryINFOROOM() *RoomQuery {
	return (&RoomInfoClient{config: ri.config}).QueryINFOROOM(ri)
}

// Update returns a builder for updating this RoomInfo.
// Note that, you need to call RoomInfo.Unwrap() before calling this method, if this RoomInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ri *RoomInfo) Update() *RoomInfoUpdateOne {
	return (&RoomInfoClient{config: ri.config}).UpdateOne(ri)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ri *RoomInfo) Unwrap() *RoomInfo {
	tx, ok := ri.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoomInfo is not a transactional entity")
	}
	ri.config.driver = tx.drv
	return ri
}

// String implements the fmt.Stringer.
func (ri *RoomInfo) String() string {
	var builder strings.Builder
	builder.WriteString("RoomInfo(")
	builder.WriteString(fmt.Sprintf("id=%v", ri.ID))
	builder.WriteString(", INFOBED=")
	builder.WriteString(fmt.Sprintf("%v", ri.INFOBED))
	builder.WriteString(", INFOREFRIGERAT=")
	builder.WriteString(fmt.Sprintf("%v", ri.INFOREFRIGERAT))
	builder.WriteString(", INFOWARDROB=")
	builder.WriteString(fmt.Sprintf("%v", ri.INFOWARDROB))
	builder.WriteString(", INFOOFFICEDE=")
	builder.WriteString(fmt.Sprintf("%v", ri.INFOOFFICEDE))
	builder.WriteByte(')')
	return builder.String()
}

// RoomInfos is a parsable slice of RoomInfo.
type RoomInfos []*RoomInfo

func (ri RoomInfos) config(cfg config) {
	for _i := range ri {
		ri[_i].config = cfg
	}
}
