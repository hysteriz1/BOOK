// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/m16_z/app/ent/book"
	"github.com/m16_z/app/ent/bookstatus"
	"github.com/m16_z/app/ent/room"
	"github.com/m16_z/app/ent/roominfo"
	"github.com/m16_z/app/ent/roomstatus"
	"github.com/m16_z/app/ent/roomtype"
	"github.com/m16_z/app/ent/user"
	"github.com/m16_z/app/ent/userstatus"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBook       = "Book"
	TypeBookstatus = "Bookstatus"
	TypeRoom       = "Room"
	TypeRoomInfo   = "RoomInfo"
	TypeRoomStatus = "RoomStatus"
	TypeRoomType   = "RoomType"
	TypeUser       = "User"
	TypeUserStatus = "UserStatus"
)

// BookMutation represents an operation that mutate the Books
// nodes in the graph.
type BookMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_RESERVATIONS           *time.Time
	clearedFields           map[string]struct{}
	_BOOK_USER              *int
	cleared_BOOK_USER       bool
	_BOOK_ROOM              *int
	cleared_BOOK_ROOM       bool
	_BOOK_BOOKSTATUS        *int
	cleared_BOOK_BOOKSTATUS bool
	done                    bool
	oldValue                func(context.Context) (*Book, error)
}

var _ ent.Mutation = (*BookMutation)(nil)

// bookOption allows to manage the mutation configuration using functional options.
type bookOption func(*BookMutation)

// newBookMutation creates new mutation for $n.Name.
func newBookMutation(c config, op Op, opts ...bookOption) *BookMutation {
	m := &BookMutation{
		config:        c,
		op:            op,
		typ:           TypeBook,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookID sets the id field of the mutation.
func withBookID(id int) bookOption {
	return func(m *BookMutation) {
		var (
			err   error
			once  sync.Once
			value *Book
		)
		m.oldValue = func(ctx context.Context) (*Book, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Book.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBook sets the old Book of the mutation.
func withBook(node *Book) bookOption {
	return func(m *BookMutation) {
		m.oldValue = func(context.Context) (*Book, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BookMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRESERVATIONS sets the RESERVATIONS field.
func (m *BookMutation) SetRESERVATIONS(t time.Time) {
	m._RESERVATIONS = &t
}

// RESERVATIONS returns the RESERVATIONS value in the mutation.
func (m *BookMutation) RESERVATIONS() (r time.Time, exists bool) {
	v := m._RESERVATIONS
	if v == nil {
		return
	}
	return *v, true
}

// OldRESERVATIONS returns the old RESERVATIONS value of the Book.
// If the Book object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BookMutation) OldRESERVATIONS(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRESERVATIONS is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRESERVATIONS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRESERVATIONS: %w", err)
	}
	return oldValue.RESERVATIONS, nil
}

// ResetRESERVATIONS reset all changes of the "RESERVATIONS" field.
func (m *BookMutation) ResetRESERVATIONS() {
	m._RESERVATIONS = nil
}

// SetBOOKUSERID sets the BOOK_USER edge to User by id.
func (m *BookMutation) SetBOOKUSERID(id int) {
	m._BOOK_USER = &id
}

// ClearBOOKUSER clears the BOOK_USER edge to User.
func (m *BookMutation) ClearBOOKUSER() {
	m.cleared_BOOK_USER = true
}

// BOOKUSERCleared returns if the edge BOOK_USER was cleared.
func (m *BookMutation) BOOKUSERCleared() bool {
	return m.cleared_BOOK_USER
}

// BOOKUSERID returns the BOOK_USER id in the mutation.
func (m *BookMutation) BOOKUSERID() (id int, exists bool) {
	if m._BOOK_USER != nil {
		return *m._BOOK_USER, true
	}
	return
}

// BOOKUSERIDs returns the BOOK_USER ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BOOKUSERID instead. It exists only for internal usage by the builders.
func (m *BookMutation) BOOKUSERIDs() (ids []int) {
	if id := m._BOOK_USER; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBOOKUSER reset all changes of the "BOOK_USER" edge.
func (m *BookMutation) ResetBOOKUSER() {
	m._BOOK_USER = nil
	m.cleared_BOOK_USER = false
}

// SetBOOKROOMID sets the BOOK_ROOM edge to Room by id.
func (m *BookMutation) SetBOOKROOMID(id int) {
	m._BOOK_ROOM = &id
}

// ClearBOOKROOM clears the BOOK_ROOM edge to Room.
func (m *BookMutation) ClearBOOKROOM() {
	m.cleared_BOOK_ROOM = true
}

// BOOKROOMCleared returns if the edge BOOK_ROOM was cleared.
func (m *BookMutation) BOOKROOMCleared() bool {
	return m.cleared_BOOK_ROOM
}

// BOOKROOMID returns the BOOK_ROOM id in the mutation.
func (m *BookMutation) BOOKROOMID() (id int, exists bool) {
	if m._BOOK_ROOM != nil {
		return *m._BOOK_ROOM, true
	}
	return
}

// BOOKROOMIDs returns the BOOK_ROOM ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BOOKROOMID instead. It exists only for internal usage by the builders.
func (m *BookMutation) BOOKROOMIDs() (ids []int) {
	if id := m._BOOK_ROOM; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBOOKROOM reset all changes of the "BOOK_ROOM" edge.
func (m *BookMutation) ResetBOOKROOM() {
	m._BOOK_ROOM = nil
	m.cleared_BOOK_ROOM = false
}

// SetBOOKBOOKSTATUSID sets the BOOK_BOOKSTATUS edge to Bookstatus by id.
func (m *BookMutation) SetBOOKBOOKSTATUSID(id int) {
	m._BOOK_BOOKSTATUS = &id
}

// ClearBOOKBOOKSTATUS clears the BOOK_BOOKSTATUS edge to Bookstatus.
func (m *BookMutation) ClearBOOKBOOKSTATUS() {
	m.cleared_BOOK_BOOKSTATUS = true
}

// BOOKBOOKSTATUSCleared returns if the edge BOOK_BOOKSTATUS was cleared.
func (m *BookMutation) BOOKBOOKSTATUSCleared() bool {
	return m.cleared_BOOK_BOOKSTATUS
}

// BOOKBOOKSTATUSID returns the BOOK_BOOKSTATUS id in the mutation.
func (m *BookMutation) BOOKBOOKSTATUSID() (id int, exists bool) {
	if m._BOOK_BOOKSTATUS != nil {
		return *m._BOOK_BOOKSTATUS, true
	}
	return
}

// BOOKBOOKSTATUSIDs returns the BOOK_BOOKSTATUS ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// BOOKBOOKSTATUSID instead. It exists only for internal usage by the builders.
func (m *BookMutation) BOOKBOOKSTATUSIDs() (ids []int) {
	if id := m._BOOK_BOOKSTATUS; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetBOOKBOOKSTATUS reset all changes of the "BOOK_BOOKSTATUS" edge.
func (m *BookMutation) ResetBOOKBOOKSTATUS() {
	m._BOOK_BOOKSTATUS = nil
	m.cleared_BOOK_BOOKSTATUS = false
}

// Op returns the operation name.
func (m *BookMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Book).
func (m *BookMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BookMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._RESERVATIONS != nil {
		fields = append(fields, book.FieldRESERVATIONS)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BookMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case book.FieldRESERVATIONS:
		return m.RESERVATIONS()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BookMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case book.FieldRESERVATIONS:
		return m.OldRESERVATIONS(ctx)
	}
	return nil, fmt.Errorf("unknown Book field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookMutation) SetField(name string, value ent.Value) error {
	switch name {
	case book.FieldRESERVATIONS:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRESERVATIONS(v)
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BookMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BookMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Book numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BookMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BookMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Book nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BookMutation) ResetField(name string) error {
	switch name {
	case book.FieldRESERVATIONS:
		m.ResetRESERVATIONS()
		return nil
	}
	return fmt.Errorf("unknown Book field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BookMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._BOOK_USER != nil {
		edges = append(edges, book.EdgeBOOKUSER)
	}
	if m._BOOK_ROOM != nil {
		edges = append(edges, book.EdgeBOOKROOM)
	}
	if m._BOOK_BOOKSTATUS != nil {
		edges = append(edges, book.EdgeBOOKBOOKSTATUS)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BookMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case book.EdgeBOOKUSER:
		if id := m._BOOK_USER; id != nil {
			return []ent.Value{*id}
		}
	case book.EdgeBOOKROOM:
		if id := m._BOOK_ROOM; id != nil {
			return []ent.Value{*id}
		}
	case book.EdgeBOOKBOOKSTATUS:
		if id := m._BOOK_BOOKSTATUS; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BookMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BookMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BookMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_BOOK_USER {
		edges = append(edges, book.EdgeBOOKUSER)
	}
	if m.cleared_BOOK_ROOM {
		edges = append(edges, book.EdgeBOOKROOM)
	}
	if m.cleared_BOOK_BOOKSTATUS {
		edges = append(edges, book.EdgeBOOKBOOKSTATUS)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BookMutation) EdgeCleared(name string) bool {
	switch name {
	case book.EdgeBOOKUSER:
		return m.cleared_BOOK_USER
	case book.EdgeBOOKROOM:
		return m.cleared_BOOK_ROOM
	case book.EdgeBOOKBOOKSTATUS:
		return m.cleared_BOOK_BOOKSTATUS
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BookMutation) ClearEdge(name string) error {
	switch name {
	case book.EdgeBOOKUSER:
		m.ClearBOOKUSER()
		return nil
	case book.EdgeBOOKROOM:
		m.ClearBOOKROOM()
		return nil
	case book.EdgeBOOKBOOKSTATUS:
		m.ClearBOOKBOOKSTATUS()
		return nil
	}
	return fmt.Errorf("unknown Book unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BookMutation) ResetEdge(name string) error {
	switch name {
	case book.EdgeBOOKUSER:
		m.ResetBOOKUSER()
		return nil
	case book.EdgeBOOKROOM:
		m.ResetBOOKROOM()
		return nil
	case book.EdgeBOOKBOOKSTATUS:
		m.ResetBOOKBOOKSTATUS()
		return nil
	}
	return fmt.Errorf("unknown Book edge %s", name)
}

// BookstatusMutation represents an operation that mutate the Bookstatuses
// nodes in the graph.
type BookstatusMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_BOOKSTATUSDATA         *string
	clearedFields           map[string]struct{}
	_BOOKSTATUS_BOOK        map[int]struct{}
	removed_BOOKSTATUS_BOOK map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*Bookstatus, error)
}

var _ ent.Mutation = (*BookstatusMutation)(nil)

// bookstatusOption allows to manage the mutation configuration using functional options.
type bookstatusOption func(*BookstatusMutation)

// newBookstatusMutation creates new mutation for $n.Name.
func newBookstatusMutation(c config, op Op, opts ...bookstatusOption) *BookstatusMutation {
	m := &BookstatusMutation{
		config:        c,
		op:            op,
		typ:           TypeBookstatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBookstatusID sets the id field of the mutation.
func withBookstatusID(id int) bookstatusOption {
	return func(m *BookstatusMutation) {
		var (
			err   error
			once  sync.Once
			value *Bookstatus
		)
		m.oldValue = func(ctx context.Context) (*Bookstatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bookstatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBookstatus sets the old Bookstatus of the mutation.
func withBookstatus(node *Bookstatus) bookstatusOption {
	return func(m *BookstatusMutation) {
		m.oldValue = func(context.Context) (*Bookstatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BookstatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BookstatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *BookstatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetBOOKSTATUSDATA sets the BOOKSTATUSDATA field.
func (m *BookstatusMutation) SetBOOKSTATUSDATA(s string) {
	m._BOOKSTATUSDATA = &s
}

// BOOKSTATUSDATA returns the BOOKSTATUSDATA value in the mutation.
func (m *BookstatusMutation) BOOKSTATUSDATA() (r string, exists bool) {
	v := m._BOOKSTATUSDATA
	if v == nil {
		return
	}
	return *v, true
}

// OldBOOKSTATUSDATA returns the old BOOKSTATUSDATA value of the Bookstatus.
// If the Bookstatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *BookstatusMutation) OldBOOKSTATUSDATA(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBOOKSTATUSDATA is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBOOKSTATUSDATA requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBOOKSTATUSDATA: %w", err)
	}
	return oldValue.BOOKSTATUSDATA, nil
}

// ResetBOOKSTATUSDATA reset all changes of the "BOOKSTATUSDATA" field.
func (m *BookstatusMutation) ResetBOOKSTATUSDATA() {
	m._BOOKSTATUSDATA = nil
}

// AddBOOKSTATUSBOOKIDs adds the BOOKSTATUS_BOOK edge to Book by ids.
func (m *BookstatusMutation) AddBOOKSTATUSBOOKIDs(ids ...int) {
	if m._BOOKSTATUS_BOOK == nil {
		m._BOOKSTATUS_BOOK = make(map[int]struct{})
	}
	for i := range ids {
		m._BOOKSTATUS_BOOK[ids[i]] = struct{}{}
	}
}

// RemoveBOOKSTATUSBOOKIDs removes the BOOKSTATUS_BOOK edge to Book by ids.
func (m *BookstatusMutation) RemoveBOOKSTATUSBOOKIDs(ids ...int) {
	if m.removed_BOOKSTATUS_BOOK == nil {
		m.removed_BOOKSTATUS_BOOK = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_BOOKSTATUS_BOOK[ids[i]] = struct{}{}
	}
}

// RemovedBOOKSTATUSBOOK returns the removed ids of BOOKSTATUS_BOOK.
func (m *BookstatusMutation) RemovedBOOKSTATUSBOOKIDs() (ids []int) {
	for id := range m.removed_BOOKSTATUS_BOOK {
		ids = append(ids, id)
	}
	return
}

// BOOKSTATUSBOOKIDs returns the BOOKSTATUS_BOOK ids in the mutation.
func (m *BookstatusMutation) BOOKSTATUSBOOKIDs() (ids []int) {
	for id := range m._BOOKSTATUS_BOOK {
		ids = append(ids, id)
	}
	return
}

// ResetBOOKSTATUSBOOK reset all changes of the "BOOKSTATUS_BOOK" edge.
func (m *BookstatusMutation) ResetBOOKSTATUSBOOK() {
	m._BOOKSTATUS_BOOK = nil
	m.removed_BOOKSTATUS_BOOK = nil
}

// Op returns the operation name.
func (m *BookstatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bookstatus).
func (m *BookstatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *BookstatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._BOOKSTATUSDATA != nil {
		fields = append(fields, bookstatus.FieldBOOKSTATUSDATA)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *BookstatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bookstatus.FieldBOOKSTATUSDATA:
		return m.BOOKSTATUSDATA()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *BookstatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bookstatus.FieldBOOKSTATUSDATA:
		return m.OldBOOKSTATUSDATA(ctx)
	}
	return nil, fmt.Errorf("unknown Bookstatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookstatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bookstatus.FieldBOOKSTATUSDATA:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBOOKSTATUSDATA(v)
		return nil
	}
	return fmt.Errorf("unknown Bookstatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *BookstatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *BookstatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *BookstatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Bookstatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *BookstatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *BookstatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *BookstatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bookstatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *BookstatusMutation) ResetField(name string) error {
	switch name {
	case bookstatus.FieldBOOKSTATUSDATA:
		m.ResetBOOKSTATUSDATA()
		return nil
	}
	return fmt.Errorf("unknown Bookstatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *BookstatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._BOOKSTATUS_BOOK != nil {
		edges = append(edges, bookstatus.EdgeBOOKSTATUSBOOK)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *BookstatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case bookstatus.EdgeBOOKSTATUSBOOK:
		ids := make([]ent.Value, 0, len(m._BOOKSTATUS_BOOK))
		for id := range m._BOOKSTATUS_BOOK {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *BookstatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_BOOKSTATUS_BOOK != nil {
		edges = append(edges, bookstatus.EdgeBOOKSTATUSBOOK)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *BookstatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case bookstatus.EdgeBOOKSTATUSBOOK:
		ids := make([]ent.Value, 0, len(m.removed_BOOKSTATUS_BOOK))
		for id := range m.removed_BOOKSTATUS_BOOK {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *BookstatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *BookstatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *BookstatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Bookstatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *BookstatusMutation) ResetEdge(name string) error {
	switch name {
	case bookstatus.EdgeBOOKSTATUSBOOK:
		m.ResetBOOKSTATUSBOOK()
		return nil
	}
	return fmt.Errorf("unknown Bookstatus edge %s", name)
}

// RoomMutation represents an operation that mutate the Rooms
// nodes in the graph.
type RoomMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_ROOMNAME             *string
	clearedFields         map[string]struct{}
	_ROOM_BOOK            map[int]struct{}
	removed_ROOM_BOOK     map[int]struct{}
	_ROOM_ROOMTYPE        *int
	cleared_ROOM_ROOMTYPE bool
	_ROOM_STATUS          *int
	cleared_ROOM_STATUS   bool
	_ROOM_INFO            *int
	cleared_ROOM_INFO     bool
	done                  bool
	oldValue              func(context.Context) (*Room, error)
}

var _ ent.Mutation = (*RoomMutation)(nil)

// roomOption allows to manage the mutation configuration using functional options.
type roomOption func(*RoomMutation)

// newRoomMutation creates new mutation for $n.Name.
func newRoomMutation(c config, op Op, opts ...roomOption) *RoomMutation {
	m := &RoomMutation{
		config:        c,
		op:            op,
		typ:           TypeRoom,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomID sets the id field of the mutation.
func withRoomID(id int) roomOption {
	return func(m *RoomMutation) {
		var (
			err   error
			once  sync.Once
			value *Room
		)
		m.oldValue = func(ctx context.Context) (*Room, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Room.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoom sets the old Room of the mutation.
func withRoom(node *Room) roomOption {
	return func(m *RoomMutation) {
		m.oldValue = func(context.Context) (*Room, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetROOMNAME sets the ROOMNAME field.
func (m *RoomMutation) SetROOMNAME(s string) {
	m._ROOMNAME = &s
}

// ROOMNAME returns the ROOMNAME value in the mutation.
func (m *RoomMutation) ROOMNAME() (r string, exists bool) {
	v := m._ROOMNAME
	if v == nil {
		return
	}
	return *v, true
}

// OldROOMNAME returns the old ROOMNAME value of the Room.
// If the Room object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomMutation) OldROOMNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldROOMNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldROOMNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldROOMNAME: %w", err)
	}
	return oldValue.ROOMNAME, nil
}

// ResetROOMNAME reset all changes of the "ROOMNAME" field.
func (m *RoomMutation) ResetROOMNAME() {
	m._ROOMNAME = nil
}

// AddROOMBOOKIDs adds the ROOM_BOOK edge to Book by ids.
func (m *RoomMutation) AddROOMBOOKIDs(ids ...int) {
	if m._ROOM_BOOK == nil {
		m._ROOM_BOOK = make(map[int]struct{})
	}
	for i := range ids {
		m._ROOM_BOOK[ids[i]] = struct{}{}
	}
}

// RemoveROOMBOOKIDs removes the ROOM_BOOK edge to Book by ids.
func (m *RoomMutation) RemoveROOMBOOKIDs(ids ...int) {
	if m.removed_ROOM_BOOK == nil {
		m.removed_ROOM_BOOK = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_ROOM_BOOK[ids[i]] = struct{}{}
	}
}

// RemovedROOMBOOK returns the removed ids of ROOM_BOOK.
func (m *RoomMutation) RemovedROOMBOOKIDs() (ids []int) {
	for id := range m.removed_ROOM_BOOK {
		ids = append(ids, id)
	}
	return
}

// ROOMBOOKIDs returns the ROOM_BOOK ids in the mutation.
func (m *RoomMutation) ROOMBOOKIDs() (ids []int) {
	for id := range m._ROOM_BOOK {
		ids = append(ids, id)
	}
	return
}

// ResetROOMBOOK reset all changes of the "ROOM_BOOK" edge.
func (m *RoomMutation) ResetROOMBOOK() {
	m._ROOM_BOOK = nil
	m.removed_ROOM_BOOK = nil
}

// SetROOMROOMTYPEID sets the ROOM_ROOMTYPE edge to RoomType by id.
func (m *RoomMutation) SetROOMROOMTYPEID(id int) {
	m._ROOM_ROOMTYPE = &id
}

// ClearROOMROOMTYPE clears the ROOM_ROOMTYPE edge to RoomType.
func (m *RoomMutation) ClearROOMROOMTYPE() {
	m.cleared_ROOM_ROOMTYPE = true
}

// ROOMROOMTYPECleared returns if the edge ROOM_ROOMTYPE was cleared.
func (m *RoomMutation) ROOMROOMTYPECleared() bool {
	return m.cleared_ROOM_ROOMTYPE
}

// ROOMROOMTYPEID returns the ROOM_ROOMTYPE id in the mutation.
func (m *RoomMutation) ROOMROOMTYPEID() (id int, exists bool) {
	if m._ROOM_ROOMTYPE != nil {
		return *m._ROOM_ROOMTYPE, true
	}
	return
}

// ROOMROOMTYPEIDs returns the ROOM_ROOMTYPE ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ROOMROOMTYPEID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) ROOMROOMTYPEIDs() (ids []int) {
	if id := m._ROOM_ROOMTYPE; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetROOMROOMTYPE reset all changes of the "ROOM_ROOMTYPE" edge.
func (m *RoomMutation) ResetROOMROOMTYPE() {
	m._ROOM_ROOMTYPE = nil
	m.cleared_ROOM_ROOMTYPE = false
}

// SetROOMSTATUSID sets the ROOM_STATUS edge to RoomStatus by id.
func (m *RoomMutation) SetROOMSTATUSID(id int) {
	m._ROOM_STATUS = &id
}

// ClearROOMSTATUS clears the ROOM_STATUS edge to RoomStatus.
func (m *RoomMutation) ClearROOMSTATUS() {
	m.cleared_ROOM_STATUS = true
}

// ROOMSTATUSCleared returns if the edge ROOM_STATUS was cleared.
func (m *RoomMutation) ROOMSTATUSCleared() bool {
	return m.cleared_ROOM_STATUS
}

// ROOMSTATUSID returns the ROOM_STATUS id in the mutation.
func (m *RoomMutation) ROOMSTATUSID() (id int, exists bool) {
	if m._ROOM_STATUS != nil {
		return *m._ROOM_STATUS, true
	}
	return
}

// ROOMSTATUSIDs returns the ROOM_STATUS ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ROOMSTATUSID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) ROOMSTATUSIDs() (ids []int) {
	if id := m._ROOM_STATUS; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetROOMSTATUS reset all changes of the "ROOM_STATUS" edge.
func (m *RoomMutation) ResetROOMSTATUS() {
	m._ROOM_STATUS = nil
	m.cleared_ROOM_STATUS = false
}

// SetROOMINFOID sets the ROOM_INFO edge to RoomInfo by id.
func (m *RoomMutation) SetROOMINFOID(id int) {
	m._ROOM_INFO = &id
}

// ClearROOMINFO clears the ROOM_INFO edge to RoomInfo.
func (m *RoomMutation) ClearROOMINFO() {
	m.cleared_ROOM_INFO = true
}

// ROOMINFOCleared returns if the edge ROOM_INFO was cleared.
func (m *RoomMutation) ROOMINFOCleared() bool {
	return m.cleared_ROOM_INFO
}

// ROOMINFOID returns the ROOM_INFO id in the mutation.
func (m *RoomMutation) ROOMINFOID() (id int, exists bool) {
	if m._ROOM_INFO != nil {
		return *m._ROOM_INFO, true
	}
	return
}

// ROOMINFOIDs returns the ROOM_INFO ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ROOMINFOID instead. It exists only for internal usage by the builders.
func (m *RoomMutation) ROOMINFOIDs() (ids []int) {
	if id := m._ROOM_INFO; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetROOMINFO reset all changes of the "ROOM_INFO" edge.
func (m *RoomMutation) ResetROOMINFO() {
	m._ROOM_INFO = nil
	m.cleared_ROOM_INFO = false
}

// Op returns the operation name.
func (m *RoomMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Room).
func (m *RoomMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._ROOMNAME != nil {
		fields = append(fields, room.FieldROOMNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case room.FieldROOMNAME:
		return m.ROOMNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case room.FieldROOMNAME:
		return m.OldROOMNAME(ctx)
	}
	return nil, fmt.Errorf("unknown Room field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) SetField(name string, value ent.Value) error {
	switch name {
	case room.FieldROOMNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetROOMNAME(v)
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Room numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Room nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomMutation) ResetField(name string) error {
	switch name {
	case room.FieldROOMNAME:
		m.ResetROOMNAME()
		return nil
	}
	return fmt.Errorf("unknown Room field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m._ROOM_BOOK != nil {
		edges = append(edges, room.EdgeROOMBOOK)
	}
	if m._ROOM_ROOMTYPE != nil {
		edges = append(edges, room.EdgeROOMROOMTYPE)
	}
	if m._ROOM_STATUS != nil {
		edges = append(edges, room.EdgeROOMSTATUS)
	}
	if m._ROOM_INFO != nil {
		edges = append(edges, room.EdgeROOMINFO)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeROOMBOOK:
		ids := make([]ent.Value, 0, len(m._ROOM_BOOK))
		for id := range m._ROOM_BOOK {
			ids = append(ids, id)
		}
		return ids
	case room.EdgeROOMROOMTYPE:
		if id := m._ROOM_ROOMTYPE; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeROOMSTATUS:
		if id := m._ROOM_STATUS; id != nil {
			return []ent.Value{*id}
		}
	case room.EdgeROOMINFO:
		if id := m._ROOM_INFO; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removed_ROOM_BOOK != nil {
		edges = append(edges, room.EdgeROOMBOOK)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case room.EdgeROOMBOOK:
		ids := make([]ent.Value, 0, len(m.removed_ROOM_BOOK))
		for id := range m.removed_ROOM_BOOK {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_ROOM_ROOMTYPE {
		edges = append(edges, room.EdgeROOMROOMTYPE)
	}
	if m.cleared_ROOM_STATUS {
		edges = append(edges, room.EdgeROOMSTATUS)
	}
	if m.cleared_ROOM_INFO {
		edges = append(edges, room.EdgeROOMINFO)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomMutation) EdgeCleared(name string) bool {
	switch name {
	case room.EdgeROOMROOMTYPE:
		return m.cleared_ROOM_ROOMTYPE
	case room.EdgeROOMSTATUS:
		return m.cleared_ROOM_STATUS
	case room.EdgeROOMINFO:
		return m.cleared_ROOM_INFO
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomMutation) ClearEdge(name string) error {
	switch name {
	case room.EdgeROOMROOMTYPE:
		m.ClearROOMROOMTYPE()
		return nil
	case room.EdgeROOMSTATUS:
		m.ClearROOMSTATUS()
		return nil
	case room.EdgeROOMINFO:
		m.ClearROOMINFO()
		return nil
	}
	return fmt.Errorf("unknown Room unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomMutation) ResetEdge(name string) error {
	switch name {
	case room.EdgeROOMBOOK:
		m.ResetROOMBOOK()
		return nil
	case room.EdgeROOMROOMTYPE:
		m.ResetROOMROOMTYPE()
		return nil
	case room.EdgeROOMSTATUS:
		m.ResetROOMSTATUS()
		return nil
	case room.EdgeROOMINFO:
		m.ResetROOMINFO()
		return nil
	}
	return fmt.Errorf("unknown Room edge %s", name)
}

// RoomInfoMutation represents an operation that mutate the RoomInfos
// nodes in the graph.
type RoomInfoMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	_INFOBED           *int
	add_INFOBED        *int
	_INFOREFRIGERAT    *int
	add_INFOREFRIGERAT *int
	_INFOWARDROB       *int
	add_INFOWARDROB    *int
	_INFOOFFICEDE      *int
	add_INFOOFFICEDE   *int
	clearedFields      map[string]struct{}
	_INFO_ROOM         map[int]struct{}
	removed_INFO_ROOM  map[int]struct{}
	done               bool
	oldValue           func(context.Context) (*RoomInfo, error)
}

var _ ent.Mutation = (*RoomInfoMutation)(nil)

// roominfoOption allows to manage the mutation configuration using functional options.
type roominfoOption func(*RoomInfoMutation)

// newRoomInfoMutation creates new mutation for $n.Name.
func newRoomInfoMutation(c config, op Op, opts ...roominfoOption) *RoomInfoMutation {
	m := &RoomInfoMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomInfo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomInfoID sets the id field of the mutation.
func withRoomInfoID(id int) roominfoOption {
	return func(m *RoomInfoMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomInfo
		)
		m.oldValue = func(ctx context.Context) (*RoomInfo, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomInfo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomInfo sets the old RoomInfo of the mutation.
func withRoomInfo(node *RoomInfo) roominfoOption {
	return func(m *RoomInfoMutation) {
		m.oldValue = func(context.Context) (*RoomInfo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomInfoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomInfoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomInfoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetINFOBED sets the INFOBED field.
func (m *RoomInfoMutation) SetINFOBED(i int) {
	m._INFOBED = &i
	m.add_INFOBED = nil
}

// INFOBED returns the INFOBED value in the mutation.
func (m *RoomInfoMutation) INFOBED() (r int, exists bool) {
	v := m._INFOBED
	if v == nil {
		return
	}
	return *v, true
}

// OldINFOBED returns the old INFOBED value of the RoomInfo.
// If the RoomInfo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomInfoMutation) OldINFOBED(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldINFOBED is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldINFOBED requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldINFOBED: %w", err)
	}
	return oldValue.INFOBED, nil
}

// AddINFOBED adds i to INFOBED.
func (m *RoomInfoMutation) AddINFOBED(i int) {
	if m.add_INFOBED != nil {
		*m.add_INFOBED += i
	} else {
		m.add_INFOBED = &i
	}
}

// AddedINFOBED returns the value that was added to the INFOBED field in this mutation.
func (m *RoomInfoMutation) AddedINFOBED() (r int, exists bool) {
	v := m.add_INFOBED
	if v == nil {
		return
	}
	return *v, true
}

// ResetINFOBED reset all changes of the "INFOBED" field.
func (m *RoomInfoMutation) ResetINFOBED() {
	m._INFOBED = nil
	m.add_INFOBED = nil
}

// SetINFOREFRIGERAT sets the INFOREFRIGERAT field.
func (m *RoomInfoMutation) SetINFOREFRIGERAT(i int) {
	m._INFOREFRIGERAT = &i
	m.add_INFOREFRIGERAT = nil
}

// INFOREFRIGERAT returns the INFOREFRIGERAT value in the mutation.
func (m *RoomInfoMutation) INFOREFRIGERAT() (r int, exists bool) {
	v := m._INFOREFRIGERAT
	if v == nil {
		return
	}
	return *v, true
}

// OldINFOREFRIGERAT returns the old INFOREFRIGERAT value of the RoomInfo.
// If the RoomInfo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomInfoMutation) OldINFOREFRIGERAT(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldINFOREFRIGERAT is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldINFOREFRIGERAT requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldINFOREFRIGERAT: %w", err)
	}
	return oldValue.INFOREFRIGERAT, nil
}

// AddINFOREFRIGERAT adds i to INFOREFRIGERAT.
func (m *RoomInfoMutation) AddINFOREFRIGERAT(i int) {
	if m.add_INFOREFRIGERAT != nil {
		*m.add_INFOREFRIGERAT += i
	} else {
		m.add_INFOREFRIGERAT = &i
	}
}

// AddedINFOREFRIGERAT returns the value that was added to the INFOREFRIGERAT field in this mutation.
func (m *RoomInfoMutation) AddedINFOREFRIGERAT() (r int, exists bool) {
	v := m.add_INFOREFRIGERAT
	if v == nil {
		return
	}
	return *v, true
}

// ResetINFOREFRIGERAT reset all changes of the "INFOREFRIGERAT" field.
func (m *RoomInfoMutation) ResetINFOREFRIGERAT() {
	m._INFOREFRIGERAT = nil
	m.add_INFOREFRIGERAT = nil
}

// SetINFOWARDROB sets the INFOWARDROB field.
func (m *RoomInfoMutation) SetINFOWARDROB(i int) {
	m._INFOWARDROB = &i
	m.add_INFOWARDROB = nil
}

// INFOWARDROB returns the INFOWARDROB value in the mutation.
func (m *RoomInfoMutation) INFOWARDROB() (r int, exists bool) {
	v := m._INFOWARDROB
	if v == nil {
		return
	}
	return *v, true
}

// OldINFOWARDROB returns the old INFOWARDROB value of the RoomInfo.
// If the RoomInfo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomInfoMutation) OldINFOWARDROB(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldINFOWARDROB is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldINFOWARDROB requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldINFOWARDROB: %w", err)
	}
	return oldValue.INFOWARDROB, nil
}

// AddINFOWARDROB adds i to INFOWARDROB.
func (m *RoomInfoMutation) AddINFOWARDROB(i int) {
	if m.add_INFOWARDROB != nil {
		*m.add_INFOWARDROB += i
	} else {
		m.add_INFOWARDROB = &i
	}
}

// AddedINFOWARDROB returns the value that was added to the INFOWARDROB field in this mutation.
func (m *RoomInfoMutation) AddedINFOWARDROB() (r int, exists bool) {
	v := m.add_INFOWARDROB
	if v == nil {
		return
	}
	return *v, true
}

// ResetINFOWARDROB reset all changes of the "INFOWARDROB" field.
func (m *RoomInfoMutation) ResetINFOWARDROB() {
	m._INFOWARDROB = nil
	m.add_INFOWARDROB = nil
}

// SetINFOOFFICEDE sets the INFOOFFICEDE field.
func (m *RoomInfoMutation) SetINFOOFFICEDE(i int) {
	m._INFOOFFICEDE = &i
	m.add_INFOOFFICEDE = nil
}

// INFOOFFICEDE returns the INFOOFFICEDE value in the mutation.
func (m *RoomInfoMutation) INFOOFFICEDE() (r int, exists bool) {
	v := m._INFOOFFICEDE
	if v == nil {
		return
	}
	return *v, true
}

// OldINFOOFFICEDE returns the old INFOOFFICEDE value of the RoomInfo.
// If the RoomInfo object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomInfoMutation) OldINFOOFFICEDE(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldINFOOFFICEDE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldINFOOFFICEDE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldINFOOFFICEDE: %w", err)
	}
	return oldValue.INFOOFFICEDE, nil
}

// AddINFOOFFICEDE adds i to INFOOFFICEDE.
func (m *RoomInfoMutation) AddINFOOFFICEDE(i int) {
	if m.add_INFOOFFICEDE != nil {
		*m.add_INFOOFFICEDE += i
	} else {
		m.add_INFOOFFICEDE = &i
	}
}

// AddedINFOOFFICEDE returns the value that was added to the INFOOFFICEDE field in this mutation.
func (m *RoomInfoMutation) AddedINFOOFFICEDE() (r int, exists bool) {
	v := m.add_INFOOFFICEDE
	if v == nil {
		return
	}
	return *v, true
}

// ResetINFOOFFICEDE reset all changes of the "INFOOFFICEDE" field.
func (m *RoomInfoMutation) ResetINFOOFFICEDE() {
	m._INFOOFFICEDE = nil
	m.add_INFOOFFICEDE = nil
}

// AddINFOROOMIDs adds the INFO_ROOM edge to Room by ids.
func (m *RoomInfoMutation) AddINFOROOMIDs(ids ...int) {
	if m._INFO_ROOM == nil {
		m._INFO_ROOM = make(map[int]struct{})
	}
	for i := range ids {
		m._INFO_ROOM[ids[i]] = struct{}{}
	}
}

// RemoveINFOROOMIDs removes the INFO_ROOM edge to Room by ids.
func (m *RoomInfoMutation) RemoveINFOROOMIDs(ids ...int) {
	if m.removed_INFO_ROOM == nil {
		m.removed_INFO_ROOM = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_INFO_ROOM[ids[i]] = struct{}{}
	}
}

// RemovedINFOROOM returns the removed ids of INFO_ROOM.
func (m *RoomInfoMutation) RemovedINFOROOMIDs() (ids []int) {
	for id := range m.removed_INFO_ROOM {
		ids = append(ids, id)
	}
	return
}

// INFOROOMIDs returns the INFO_ROOM ids in the mutation.
func (m *RoomInfoMutation) INFOROOMIDs() (ids []int) {
	for id := range m._INFO_ROOM {
		ids = append(ids, id)
	}
	return
}

// ResetINFOROOM reset all changes of the "INFO_ROOM" edge.
func (m *RoomInfoMutation) ResetINFOROOM() {
	m._INFO_ROOM = nil
	m.removed_INFO_ROOM = nil
}

// Op returns the operation name.
func (m *RoomInfoMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomInfo).
func (m *RoomInfoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomInfoMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m._INFOBED != nil {
		fields = append(fields, roominfo.FieldINFOBED)
	}
	if m._INFOREFRIGERAT != nil {
		fields = append(fields, roominfo.FieldINFOREFRIGERAT)
	}
	if m._INFOWARDROB != nil {
		fields = append(fields, roominfo.FieldINFOWARDROB)
	}
	if m._INFOOFFICEDE != nil {
		fields = append(fields, roominfo.FieldINFOOFFICEDE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomInfoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roominfo.FieldINFOBED:
		return m.INFOBED()
	case roominfo.FieldINFOREFRIGERAT:
		return m.INFOREFRIGERAT()
	case roominfo.FieldINFOWARDROB:
		return m.INFOWARDROB()
	case roominfo.FieldINFOOFFICEDE:
		return m.INFOOFFICEDE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomInfoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roominfo.FieldINFOBED:
		return m.OldINFOBED(ctx)
	case roominfo.FieldINFOREFRIGERAT:
		return m.OldINFOREFRIGERAT(ctx)
	case roominfo.FieldINFOWARDROB:
		return m.OldINFOWARDROB(ctx)
	case roominfo.FieldINFOOFFICEDE:
		return m.OldINFOOFFICEDE(ctx)
	}
	return nil, fmt.Errorf("unknown RoomInfo field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomInfoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roominfo.FieldINFOBED:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetINFOBED(v)
		return nil
	case roominfo.FieldINFOREFRIGERAT:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetINFOREFRIGERAT(v)
		return nil
	case roominfo.FieldINFOWARDROB:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetINFOWARDROB(v)
		return nil
	case roominfo.FieldINFOOFFICEDE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetINFOOFFICEDE(v)
		return nil
	}
	return fmt.Errorf("unknown RoomInfo field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomInfoMutation) AddedFields() []string {
	var fields []string
	if m.add_INFOBED != nil {
		fields = append(fields, roominfo.FieldINFOBED)
	}
	if m.add_INFOREFRIGERAT != nil {
		fields = append(fields, roominfo.FieldINFOREFRIGERAT)
	}
	if m.add_INFOWARDROB != nil {
		fields = append(fields, roominfo.FieldINFOWARDROB)
	}
	if m.add_INFOOFFICEDE != nil {
		fields = append(fields, roominfo.FieldINFOOFFICEDE)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomInfoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roominfo.FieldINFOBED:
		return m.AddedINFOBED()
	case roominfo.FieldINFOREFRIGERAT:
		return m.AddedINFOREFRIGERAT()
	case roominfo.FieldINFOWARDROB:
		return m.AddedINFOWARDROB()
	case roominfo.FieldINFOOFFICEDE:
		return m.AddedINFOOFFICEDE()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomInfoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roominfo.FieldINFOBED:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddINFOBED(v)
		return nil
	case roominfo.FieldINFOREFRIGERAT:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddINFOREFRIGERAT(v)
		return nil
	case roominfo.FieldINFOWARDROB:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddINFOWARDROB(v)
		return nil
	case roominfo.FieldINFOOFFICEDE:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddINFOOFFICEDE(v)
		return nil
	}
	return fmt.Errorf("unknown RoomInfo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomInfoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomInfoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomInfoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomInfo nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomInfoMutation) ResetField(name string) error {
	switch name {
	case roominfo.FieldINFOBED:
		m.ResetINFOBED()
		return nil
	case roominfo.FieldINFOREFRIGERAT:
		m.ResetINFOREFRIGERAT()
		return nil
	case roominfo.FieldINFOWARDROB:
		m.ResetINFOWARDROB()
		return nil
	case roominfo.FieldINFOOFFICEDE:
		m.ResetINFOOFFICEDE()
		return nil
	}
	return fmt.Errorf("unknown RoomInfo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomInfoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._INFO_ROOM != nil {
		edges = append(edges, roominfo.EdgeINFOROOM)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomInfoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roominfo.EdgeINFOROOM:
		ids := make([]ent.Value, 0, len(m._INFO_ROOM))
		for id := range m._INFO_ROOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomInfoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_INFO_ROOM != nil {
		edges = append(edges, roominfo.EdgeINFOROOM)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomInfoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roominfo.EdgeINFOROOM:
		ids := make([]ent.Value, 0, len(m.removed_INFO_ROOM))
		for id := range m.removed_INFO_ROOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomInfoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomInfoMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomInfoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomInfo unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomInfoMutation) ResetEdge(name string) error {
	switch name {
	case roominfo.EdgeINFOROOM:
		m.ResetINFOROOM()
		return nil
	}
	return fmt.Errorf("unknown RoomInfo edge %s", name)
}

// RoomStatusMutation represents an operation that mutate the RoomStatusSlice
// nodes in the graph.
type RoomStatusMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_STATUSDATA         *string
	clearedFields       map[string]struct{}
	_STATUS_ROOM        map[int]struct{}
	removed_STATUS_ROOM map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*RoomStatus, error)
}

var _ ent.Mutation = (*RoomStatusMutation)(nil)

// roomstatusOption allows to manage the mutation configuration using functional options.
type roomstatusOption func(*RoomStatusMutation)

// newRoomStatusMutation creates new mutation for $n.Name.
func newRoomStatusMutation(c config, op Op, opts ...roomstatusOption) *RoomStatusMutation {
	m := &RoomStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomStatusID sets the id field of the mutation.
func withRoomStatusID(id int) roomstatusOption {
	return func(m *RoomStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomStatus
		)
		m.oldValue = func(ctx context.Context) (*RoomStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomStatus sets the old RoomStatus of the mutation.
func withRoomStatus(node *RoomStatus) roomstatusOption {
	return func(m *RoomStatusMutation) {
		m.oldValue = func(context.Context) (*RoomStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSTATUSDATA sets the STATUSDATA field.
func (m *RoomStatusMutation) SetSTATUSDATA(s string) {
	m._STATUSDATA = &s
}

// STATUSDATA returns the STATUSDATA value in the mutation.
func (m *RoomStatusMutation) STATUSDATA() (r string, exists bool) {
	v := m._STATUSDATA
	if v == nil {
		return
	}
	return *v, true
}

// OldSTATUSDATA returns the old STATUSDATA value of the RoomStatus.
// If the RoomStatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomStatusMutation) OldSTATUSDATA(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSTATUSDATA is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSTATUSDATA requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSTATUSDATA: %w", err)
	}
	return oldValue.STATUSDATA, nil
}

// ResetSTATUSDATA reset all changes of the "STATUSDATA" field.
func (m *RoomStatusMutation) ResetSTATUSDATA() {
	m._STATUSDATA = nil
}

// AddSTATUSROOMIDs adds the STATUS_ROOM edge to Room by ids.
func (m *RoomStatusMutation) AddSTATUSROOMIDs(ids ...int) {
	if m._STATUS_ROOM == nil {
		m._STATUS_ROOM = make(map[int]struct{})
	}
	for i := range ids {
		m._STATUS_ROOM[ids[i]] = struct{}{}
	}
}

// RemoveSTATUSROOMIDs removes the STATUS_ROOM edge to Room by ids.
func (m *RoomStatusMutation) RemoveSTATUSROOMIDs(ids ...int) {
	if m.removed_STATUS_ROOM == nil {
		m.removed_STATUS_ROOM = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_STATUS_ROOM[ids[i]] = struct{}{}
	}
}

// RemovedSTATUSROOM returns the removed ids of STATUS_ROOM.
func (m *RoomStatusMutation) RemovedSTATUSROOMIDs() (ids []int) {
	for id := range m.removed_STATUS_ROOM {
		ids = append(ids, id)
	}
	return
}

// STATUSROOMIDs returns the STATUS_ROOM ids in the mutation.
func (m *RoomStatusMutation) STATUSROOMIDs() (ids []int) {
	for id := range m._STATUS_ROOM {
		ids = append(ids, id)
	}
	return
}

// ResetSTATUSROOM reset all changes of the "STATUS_ROOM" edge.
func (m *RoomStatusMutation) ResetSTATUSROOM() {
	m._STATUS_ROOM = nil
	m.removed_STATUS_ROOM = nil
}

// Op returns the operation name.
func (m *RoomStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomStatus).
func (m *RoomStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomStatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._STATUSDATA != nil {
		fields = append(fields, roomstatus.FieldSTATUSDATA)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomstatus.FieldSTATUSDATA:
		return m.STATUSDATA()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomstatus.FieldSTATUSDATA:
		return m.OldSTATUSDATA(ctx)
	}
	return nil, fmt.Errorf("unknown RoomStatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomstatus.FieldSTATUSDATA:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSTATUSDATA(v)
		return nil
	}
	return fmt.Errorf("unknown RoomStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomStatusMutation) ResetField(name string) error {
	switch name {
	case roomstatus.FieldSTATUSDATA:
		m.ResetSTATUSDATA()
		return nil
	}
	return fmt.Errorf("unknown RoomStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._STATUS_ROOM != nil {
		edges = append(edges, roomstatus.EdgeSTATUSROOM)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomstatus.EdgeSTATUSROOM:
		ids := make([]ent.Value, 0, len(m._STATUS_ROOM))
		for id := range m._STATUS_ROOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_STATUS_ROOM != nil {
		edges = append(edges, roomstatus.EdgeSTATUSROOM)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomstatus.EdgeSTATUSROOM:
		ids := make([]ent.Value, 0, len(m.removed_STATUS_ROOM))
		for id := range m.removed_STATUS_ROOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomStatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomStatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomStatusMutation) ResetEdge(name string) error {
	switch name {
	case roomstatus.EdgeSTATUSROOM:
		m.ResetSTATUSROOM()
		return nil
	}
	return fmt.Errorf("unknown RoomStatus edge %s", name)
}

// RoomTypeMutation represents an operation that mutate the RoomTypes
// nodes in the graph.
type RoomTypeMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_ROOMTYPEDATA         *string
	_COSTDATA             *int
	add_COSTDATA          *int
	clearedFields         map[string]struct{}
	_ROOMTYPE_ROOM        map[int]struct{}
	removed_ROOMTYPE_ROOM map[int]struct{}
	done                  bool
	oldValue              func(context.Context) (*RoomType, error)
}

var _ ent.Mutation = (*RoomTypeMutation)(nil)

// roomtypeOption allows to manage the mutation configuration using functional options.
type roomtypeOption func(*RoomTypeMutation)

// newRoomTypeMutation creates new mutation for $n.Name.
func newRoomTypeMutation(c config, op Op, opts ...roomtypeOption) *RoomTypeMutation {
	m := &RoomTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeRoomType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRoomTypeID sets the id field of the mutation.
func withRoomTypeID(id int) roomtypeOption {
	return func(m *RoomTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *RoomType
		)
		m.oldValue = func(ctx context.Context) (*RoomType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RoomType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRoomType sets the old RoomType of the mutation.
func withRoomType(node *RoomType) roomtypeOption {
	return func(m *RoomTypeMutation) {
		m.oldValue = func(context.Context) (*RoomType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoomTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoomTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoomTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetROOMTYPEDATA sets the ROOMTYPEDATA field.
func (m *RoomTypeMutation) SetROOMTYPEDATA(s string) {
	m._ROOMTYPEDATA = &s
}

// ROOMTYPEDATA returns the ROOMTYPEDATA value in the mutation.
func (m *RoomTypeMutation) ROOMTYPEDATA() (r string, exists bool) {
	v := m._ROOMTYPEDATA
	if v == nil {
		return
	}
	return *v, true
}

// OldROOMTYPEDATA returns the old ROOMTYPEDATA value of the RoomType.
// If the RoomType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomTypeMutation) OldROOMTYPEDATA(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldROOMTYPEDATA is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldROOMTYPEDATA requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldROOMTYPEDATA: %w", err)
	}
	return oldValue.ROOMTYPEDATA, nil
}

// ResetROOMTYPEDATA reset all changes of the "ROOMTYPEDATA" field.
func (m *RoomTypeMutation) ResetROOMTYPEDATA() {
	m._ROOMTYPEDATA = nil
}

// SetCOSTDATA sets the COSTDATA field.
func (m *RoomTypeMutation) SetCOSTDATA(i int) {
	m._COSTDATA = &i
	m.add_COSTDATA = nil
}

// COSTDATA returns the COSTDATA value in the mutation.
func (m *RoomTypeMutation) COSTDATA() (r int, exists bool) {
	v := m._COSTDATA
	if v == nil {
		return
	}
	return *v, true
}

// OldCOSTDATA returns the old COSTDATA value of the RoomType.
// If the RoomType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RoomTypeMutation) OldCOSTDATA(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCOSTDATA is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCOSTDATA requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCOSTDATA: %w", err)
	}
	return oldValue.COSTDATA, nil
}

// AddCOSTDATA adds i to COSTDATA.
func (m *RoomTypeMutation) AddCOSTDATA(i int) {
	if m.add_COSTDATA != nil {
		*m.add_COSTDATA += i
	} else {
		m.add_COSTDATA = &i
	}
}

// AddedCOSTDATA returns the value that was added to the COSTDATA field in this mutation.
func (m *RoomTypeMutation) AddedCOSTDATA() (r int, exists bool) {
	v := m.add_COSTDATA
	if v == nil {
		return
	}
	return *v, true
}

// ResetCOSTDATA reset all changes of the "COSTDATA" field.
func (m *RoomTypeMutation) ResetCOSTDATA() {
	m._COSTDATA = nil
	m.add_COSTDATA = nil
}

// AddROOMTYPEROOMIDs adds the ROOMTYPE_ROOM edge to Room by ids.
func (m *RoomTypeMutation) AddROOMTYPEROOMIDs(ids ...int) {
	if m._ROOMTYPE_ROOM == nil {
		m._ROOMTYPE_ROOM = make(map[int]struct{})
	}
	for i := range ids {
		m._ROOMTYPE_ROOM[ids[i]] = struct{}{}
	}
}

// RemoveROOMTYPEROOMIDs removes the ROOMTYPE_ROOM edge to Room by ids.
func (m *RoomTypeMutation) RemoveROOMTYPEROOMIDs(ids ...int) {
	if m.removed_ROOMTYPE_ROOM == nil {
		m.removed_ROOMTYPE_ROOM = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_ROOMTYPE_ROOM[ids[i]] = struct{}{}
	}
}

// RemovedROOMTYPEROOM returns the removed ids of ROOMTYPE_ROOM.
func (m *RoomTypeMutation) RemovedROOMTYPEROOMIDs() (ids []int) {
	for id := range m.removed_ROOMTYPE_ROOM {
		ids = append(ids, id)
	}
	return
}

// ROOMTYPEROOMIDs returns the ROOMTYPE_ROOM ids in the mutation.
func (m *RoomTypeMutation) ROOMTYPEROOMIDs() (ids []int) {
	for id := range m._ROOMTYPE_ROOM {
		ids = append(ids, id)
	}
	return
}

// ResetROOMTYPEROOM reset all changes of the "ROOMTYPE_ROOM" edge.
func (m *RoomTypeMutation) ResetROOMTYPEROOM() {
	m._ROOMTYPE_ROOM = nil
	m.removed_ROOMTYPE_ROOM = nil
}

// Op returns the operation name.
func (m *RoomTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoomType).
func (m *RoomTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoomTypeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._ROOMTYPEDATA != nil {
		fields = append(fields, roomtype.FieldROOMTYPEDATA)
	}
	if m._COSTDATA != nil {
		fields = append(fields, roomtype.FieldCOSTDATA)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoomTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldROOMTYPEDATA:
		return m.ROOMTYPEDATA()
	case roomtype.FieldCOSTDATA:
		return m.COSTDATA()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RoomTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case roomtype.FieldROOMTYPEDATA:
		return m.OldROOMTYPEDATA(ctx)
	case roomtype.FieldCOSTDATA:
		return m.OldCOSTDATA(ctx)
	}
	return nil, fmt.Errorf("unknown RoomType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldROOMTYPEDATA:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetROOMTYPEDATA(v)
		return nil
	case roomtype.FieldCOSTDATA:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCOSTDATA(v)
		return nil
	}
	return fmt.Errorf("unknown RoomType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoomTypeMutation) AddedFields() []string {
	var fields []string
	if m.add_COSTDATA != nil {
		fields = append(fields, roomtype.FieldCOSTDATA)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoomTypeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case roomtype.FieldCOSTDATA:
		return m.AddedCOSTDATA()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoomTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case roomtype.FieldCOSTDATA:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCOSTDATA(v)
		return nil
	}
	return fmt.Errorf("unknown RoomType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoomTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoomTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoomTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoomType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoomTypeMutation) ResetField(name string) error {
	switch name {
	case roomtype.FieldROOMTYPEDATA:
		m.ResetROOMTYPEDATA()
		return nil
	case roomtype.FieldCOSTDATA:
		m.ResetCOSTDATA()
		return nil
	}
	return fmt.Errorf("unknown RoomType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoomTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._ROOMTYPE_ROOM != nil {
		edges = append(edges, roomtype.EdgeROOMTYPEROOM)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoomTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeROOMTYPEROOM:
		ids := make([]ent.Value, 0, len(m._ROOMTYPE_ROOM))
		for id := range m._ROOMTYPE_ROOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoomTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_ROOMTYPE_ROOM != nil {
		edges = append(edges, roomtype.EdgeROOMTYPEROOM)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoomTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roomtype.EdgeROOMTYPEROOM:
		ids := make([]ent.Value, 0, len(m.removed_ROOMTYPE_ROOM))
		for id := range m.removed_ROOMTYPE_ROOM {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoomTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoomTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoomTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoomType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoomTypeMutation) ResetEdge(name string) error {
	switch name {
	case roomtype.EdgeROOMTYPEROOM:
		m.ResetROOMTYPEROOM()
		return nil
	}
	return fmt.Errorf("unknown RoomType edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_USEREMAIL              *string
	_USERNAME               *string
	clearedFields           map[string]struct{}
	_USER_BOOK              map[int]struct{}
	removed_USER_BOOK       map[int]struct{}
	_USER_USERSTATUS        *int
	cleared_USER_USERSTATUS bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUSEREMAIL sets the USEREMAIL field.
func (m *UserMutation) SetUSEREMAIL(s string) {
	m._USEREMAIL = &s
}

// USEREMAIL returns the USEREMAIL value in the mutation.
func (m *UserMutation) USEREMAIL() (r string, exists bool) {
	v := m._USEREMAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldUSEREMAIL returns the old USEREMAIL value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSEREMAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSEREMAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSEREMAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSEREMAIL: %w", err)
	}
	return oldValue.USEREMAIL, nil
}

// ResetUSEREMAIL reset all changes of the "USEREMAIL" field.
func (m *UserMutation) ResetUSEREMAIL() {
	m._USEREMAIL = nil
}

// SetUSERNAME sets the USERNAME field.
func (m *UserMutation) SetUSERNAME(s string) {
	m._USERNAME = &s
}

// USERNAME returns the USERNAME value in the mutation.
func (m *UserMutation) USERNAME() (r string, exists bool) {
	v := m._USERNAME
	if v == nil {
		return
	}
	return *v, true
}

// OldUSERNAME returns the old USERNAME value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSERNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSERNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSERNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSERNAME: %w", err)
	}
	return oldValue.USERNAME, nil
}

// ResetUSERNAME reset all changes of the "USERNAME" field.
func (m *UserMutation) ResetUSERNAME() {
	m._USERNAME = nil
}

// AddUSERBOOKIDs adds the USER_BOOK edge to Book by ids.
func (m *UserMutation) AddUSERBOOKIDs(ids ...int) {
	if m._USER_BOOK == nil {
		m._USER_BOOK = make(map[int]struct{})
	}
	for i := range ids {
		m._USER_BOOK[ids[i]] = struct{}{}
	}
}

// RemoveUSERBOOKIDs removes the USER_BOOK edge to Book by ids.
func (m *UserMutation) RemoveUSERBOOKIDs(ids ...int) {
	if m.removed_USER_BOOK == nil {
		m.removed_USER_BOOK = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_USER_BOOK[ids[i]] = struct{}{}
	}
}

// RemovedUSERBOOK returns the removed ids of USER_BOOK.
func (m *UserMutation) RemovedUSERBOOKIDs() (ids []int) {
	for id := range m.removed_USER_BOOK {
		ids = append(ids, id)
	}
	return
}

// USERBOOKIDs returns the USER_BOOK ids in the mutation.
func (m *UserMutation) USERBOOKIDs() (ids []int) {
	for id := range m._USER_BOOK {
		ids = append(ids, id)
	}
	return
}

// ResetUSERBOOK reset all changes of the "USER_BOOK" edge.
func (m *UserMutation) ResetUSERBOOK() {
	m._USER_BOOK = nil
	m.removed_USER_BOOK = nil
}

// SetUSERUSERSTATUSID sets the USER_USERSTATUS edge to UserStatus by id.
func (m *UserMutation) SetUSERUSERSTATUSID(id int) {
	m._USER_USERSTATUS = &id
}

// ClearUSERUSERSTATUS clears the USER_USERSTATUS edge to UserStatus.
func (m *UserMutation) ClearUSERUSERSTATUS() {
	m.cleared_USER_USERSTATUS = true
}

// USERUSERSTATUSCleared returns if the edge USER_USERSTATUS was cleared.
func (m *UserMutation) USERUSERSTATUSCleared() bool {
	return m.cleared_USER_USERSTATUS
}

// USERUSERSTATUSID returns the USER_USERSTATUS id in the mutation.
func (m *UserMutation) USERUSERSTATUSID() (id int, exists bool) {
	if m._USER_USERSTATUS != nil {
		return *m._USER_USERSTATUS, true
	}
	return
}

// USERUSERSTATUSIDs returns the USER_USERSTATUS ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// USERUSERSTATUSID instead. It exists only for internal usage by the builders.
func (m *UserMutation) USERUSERSTATUSIDs() (ids []int) {
	if id := m._USER_USERSTATUS; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUSERUSERSTATUS reset all changes of the "USER_USERSTATUS" edge.
func (m *UserMutation) ResetUSERUSERSTATUS() {
	m._USER_USERSTATUS = nil
	m.cleared_USER_USERSTATUS = false
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._USEREMAIL != nil {
		fields = append(fields, user.FieldUSEREMAIL)
	}
	if m._USERNAME != nil {
		fields = append(fields, user.FieldUSERNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.USEREMAIL()
	case user.FieldUSERNAME:
		return m.USERNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.OldUSEREMAIL(ctx)
	case user.FieldUSERNAME:
		return m.OldUSERNAME(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUSEREMAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSEREMAIL(v)
		return nil
	case user.FieldUSERNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSERNAME(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUSEREMAIL:
		m.ResetUSEREMAIL()
		return nil
	case user.FieldUSERNAME:
		m.ResetUSERNAME()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m._USER_BOOK != nil {
		edges = append(edges, user.EdgeUSERBOOK)
	}
	if m._USER_USERSTATUS != nil {
		edges = append(edges, user.EdgeUSERUSERSTATUS)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUSERBOOK:
		ids := make([]ent.Value, 0, len(m._USER_BOOK))
		for id := range m._USER_BOOK {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeUSERUSERSTATUS:
		if id := m._USER_USERSTATUS; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removed_USER_BOOK != nil {
		edges = append(edges, user.EdgeUSERBOOK)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUSERBOOK:
		ids := make([]ent.Value, 0, len(m.removed_USER_BOOK))
		for id := range m.removed_USER_BOOK {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleared_USER_USERSTATUS {
		edges = append(edges, user.EdgeUSERUSERSTATUS)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUSERUSERSTATUS:
		return m.cleared_USER_USERSTATUS
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeUSERUSERSTATUS:
		m.ClearUSERUSERSTATUS()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUSERBOOK:
		m.ResetUSERBOOK()
		return nil
	case user.EdgeUSERUSERSTATUS:
		m.ResetUSERUSERSTATUS()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserStatusMutation represents an operation that mutate the UserStatusSlice
// nodes in the graph.
type UserStatusMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_STATUS                 *string
	clearedFields           map[string]struct{}
	_USERSTATUS_USER        map[int]struct{}
	removed_USERSTATUS_USER map[int]struct{}
	done                    bool
	oldValue                func(context.Context) (*UserStatus, error)
}

var _ ent.Mutation = (*UserStatusMutation)(nil)

// userstatusOption allows to manage the mutation configuration using functional options.
type userstatusOption func(*UserStatusMutation)

// newUserStatusMutation creates new mutation for $n.Name.
func newUserStatusMutation(c config, op Op, opts ...userstatusOption) *UserStatusMutation {
	m := &UserStatusMutation{
		config:        c,
		op:            op,
		typ:           TypeUserStatus,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserStatusID sets the id field of the mutation.
func withUserStatusID(id int) userstatusOption {
	return func(m *UserStatusMutation) {
		var (
			err   error
			once  sync.Once
			value *UserStatus
		)
		m.oldValue = func(ctx context.Context) (*UserStatus, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserStatus.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserStatus sets the old UserStatus of the mutation.
func withUserStatus(node *UserStatus) userstatusOption {
	return func(m *UserStatusMutation) {
		m.oldValue = func(context.Context) (*UserStatus, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserStatusMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserStatusMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserStatusMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSTATUS sets the STATUS field.
func (m *UserStatusMutation) SetSTATUS(s string) {
	m._STATUS = &s
}

// STATUS returns the STATUS value in the mutation.
func (m *UserStatusMutation) STATUS() (r string, exists bool) {
	v := m._STATUS
	if v == nil {
		return
	}
	return *v, true
}

// OldSTATUS returns the old STATUS value of the UserStatus.
// If the UserStatus object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserStatusMutation) OldSTATUS(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSTATUS is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSTATUS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSTATUS: %w", err)
	}
	return oldValue.STATUS, nil
}

// ResetSTATUS reset all changes of the "STATUS" field.
func (m *UserStatusMutation) ResetSTATUS() {
	m._STATUS = nil
}

// AddUSERSTATUSUSERIDs adds the USERSTATUS_USER edge to User by ids.
func (m *UserStatusMutation) AddUSERSTATUSUSERIDs(ids ...int) {
	if m._USERSTATUS_USER == nil {
		m._USERSTATUS_USER = make(map[int]struct{})
	}
	for i := range ids {
		m._USERSTATUS_USER[ids[i]] = struct{}{}
	}
}

// RemoveUSERSTATUSUSERIDs removes the USERSTATUS_USER edge to User by ids.
func (m *UserStatusMutation) RemoveUSERSTATUSUSERIDs(ids ...int) {
	if m.removed_USERSTATUS_USER == nil {
		m.removed_USERSTATUS_USER = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_USERSTATUS_USER[ids[i]] = struct{}{}
	}
}

// RemovedUSERSTATUSUSER returns the removed ids of USERSTATUS_USER.
func (m *UserStatusMutation) RemovedUSERSTATUSUSERIDs() (ids []int) {
	for id := range m.removed_USERSTATUS_USER {
		ids = append(ids, id)
	}
	return
}

// USERSTATUSUSERIDs returns the USERSTATUS_USER ids in the mutation.
func (m *UserStatusMutation) USERSTATUSUSERIDs() (ids []int) {
	for id := range m._USERSTATUS_USER {
		ids = append(ids, id)
	}
	return
}

// ResetUSERSTATUSUSER reset all changes of the "USERSTATUS_USER" edge.
func (m *UserStatusMutation) ResetUSERSTATUSUSER() {
	m._USERSTATUS_USER = nil
	m.removed_USERSTATUS_USER = nil
}

// Op returns the operation name.
func (m *UserStatusMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserStatus).
func (m *UserStatusMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserStatusMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._STATUS != nil {
		fields = append(fields, userstatus.FieldSTATUS)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserStatusMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case userstatus.FieldSTATUS:
		return m.STATUS()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserStatusMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case userstatus.FieldSTATUS:
		return m.OldSTATUS(ctx)
	}
	return nil, fmt.Errorf("unknown UserStatus field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserStatusMutation) SetField(name string, value ent.Value) error {
	switch name {
	case userstatus.FieldSTATUS:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSTATUS(v)
		return nil
	}
	return fmt.Errorf("unknown UserStatus field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserStatusMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserStatusMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserStatusMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserStatus numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserStatusMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserStatusMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserStatusMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserStatus nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserStatusMutation) ResetField(name string) error {
	switch name {
	case userstatus.FieldSTATUS:
		m.ResetSTATUS()
		return nil
	}
	return fmt.Errorf("unknown UserStatus field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserStatusMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._USERSTATUS_USER != nil {
		edges = append(edges, userstatus.EdgeUSERSTATUSUSER)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserStatusMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case userstatus.EdgeUSERSTATUSUSER:
		ids := make([]ent.Value, 0, len(m._USERSTATUS_USER))
		for id := range m._USERSTATUS_USER {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserStatusMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_USERSTATUS_USER != nil {
		edges = append(edges, userstatus.EdgeUSERSTATUSUSER)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserStatusMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case userstatus.EdgeUSERSTATUSUSER:
		ids := make([]ent.Value, 0, len(m.removed_USERSTATUS_USER))
		for id := range m.removed_USERSTATUS_USER {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserStatusMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserStatusMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserStatusMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UserStatus unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserStatusMutation) ResetEdge(name string) error {
	switch name {
	case userstatus.EdgeUSERSTATUSUSER:
		m.ResetUSERSTATUSUSER()
		return nil
	}
	return fmt.Errorf("unknown UserStatus edge %s", name)
}
