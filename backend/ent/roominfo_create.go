// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/m16_z/app/ent/room"
	"github.com/m16_z/app/ent/roominfo"
)

// RoomInfoCreate is the builder for creating a RoomInfo entity.
type RoomInfoCreate struct {
	config
	mutation *RoomInfoMutation
	hooks    []Hook
}

// SetINFOBED sets the INFOBED field.
func (ric *RoomInfoCreate) SetINFOBED(i int) *RoomInfoCreate {
	ric.mutation.SetINFOBED(i)
	return ric
}

// SetINFOREFRIGERAT sets the INFOREFRIGERAT field.
func (ric *RoomInfoCreate) SetINFOREFRIGERAT(i int) *RoomInfoCreate {
	ric.mutation.SetINFOREFRIGERAT(i)
	return ric
}

// SetINFOWARDROB sets the INFOWARDROB field.
func (ric *RoomInfoCreate) SetINFOWARDROB(i int) *RoomInfoCreate {
	ric.mutation.SetINFOWARDROB(i)
	return ric
}

// SetINFOOFFICEDE sets the INFOOFFICEDE field.
func (ric *RoomInfoCreate) SetINFOOFFICEDE(i int) *RoomInfoCreate {
	ric.mutation.SetINFOOFFICEDE(i)
	return ric
}

// AddINFOROOMIDs adds the INFO_ROOM edge to Room by ids.
func (ric *RoomInfoCreate) AddINFOROOMIDs(ids ...int) *RoomInfoCreate {
	ric.mutation.AddINFOROOMIDs(ids...)
	return ric
}

// AddINFOROOM adds the INFO_ROOM edges to Room.
func (ric *RoomInfoCreate) AddINFOROOM(r ...*Room) *RoomInfoCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ric.AddINFOROOMIDs(ids...)
}

// Mutation returns the RoomInfoMutation object of the builder.
func (ric *RoomInfoCreate) Mutation() *RoomInfoMutation {
	return ric.mutation
}

// Save creates the RoomInfo in the database.
func (ric *RoomInfoCreate) Save(ctx context.Context) (*RoomInfo, error) {
	if _, ok := ric.mutation.INFOBED(); !ok {
		return nil, &ValidationError{Name: "INFOBED", err: errors.New("ent: missing required field \"INFOBED\"")}
	}
	if _, ok := ric.mutation.INFOREFRIGERAT(); !ok {
		return nil, &ValidationError{Name: "INFOREFRIGERAT", err: errors.New("ent: missing required field \"INFOREFRIGERAT\"")}
	}
	if _, ok := ric.mutation.INFOWARDROB(); !ok {
		return nil, &ValidationError{Name: "INFOWARDROB", err: errors.New("ent: missing required field \"INFOWARDROB\"")}
	}
	if _, ok := ric.mutation.INFOOFFICEDE(); !ok {
		return nil, &ValidationError{Name: "INFOOFFICEDE", err: errors.New("ent: missing required field \"INFOOFFICEDE\"")}
	}
	var (
		err  error
		node *RoomInfo
	)
	if len(ric.hooks) == 0 {
		node, err = ric.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ric.mutation = mutation
			node, err = ric.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ric.hooks) - 1; i >= 0; i-- {
			mut = ric.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ric.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ric *RoomInfoCreate) SaveX(ctx context.Context) *RoomInfo {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ric *RoomInfoCreate) sqlSave(ctx context.Context) (*RoomInfo, error) {
	ri, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ri.ID = int(id)
	return ri, nil
}

func (ric *RoomInfoCreate) createSpec() (*RoomInfo, *sqlgraph.CreateSpec) {
	var (
		ri    = &RoomInfo{config: ric.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roominfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roominfo.FieldID,
			},
		}
	)
	if value, ok := ric.mutation.INFOBED(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roominfo.FieldINFOBED,
		})
		ri.INFOBED = value
	}
	if value, ok := ric.mutation.INFOREFRIGERAT(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roominfo.FieldINFOREFRIGERAT,
		})
		ri.INFOREFRIGERAT = value
	}
	if value, ok := ric.mutation.INFOWARDROB(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roominfo.FieldINFOWARDROB,
		})
		ri.INFOWARDROB = value
	}
	if value, ok := ric.mutation.INFOOFFICEDE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: roominfo.FieldINFOOFFICEDE,
		})
		ri.INFOOFFICEDE = value
	}
	if nodes := ric.mutation.INFOROOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roominfo.INFOROOMTable,
			Columns: []string{roominfo.INFOROOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ri, _spec
}
