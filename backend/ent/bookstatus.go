// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/m16_z/app/ent/bookstatus"
)

// Bookstatus is the model entity for the Bookstatus schema.
type Bookstatus struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BOOKSTATUSDATA holds the value of the "BOOKSTATUSDATA" field.
	BOOKSTATUSDATA string `json:"BOOKSTATUSDATA,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BookstatusQuery when eager-loading is set.
	Edges BookstatusEdges `json:"edges"`
}

// BookstatusEdges holds the relations/edges for other nodes in the graph.
type BookstatusEdges struct {
	// BOOKSTATUSBOOK holds the value of the BOOKSTATUS_BOOK edge.
	BOOKSTATUSBOOK []*Book
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// BOOKSTATUSBOOKOrErr returns the BOOKSTATUSBOOK value or an error if the edge
// was not loaded in eager-loading.
func (e BookstatusEdges) BOOKSTATUSBOOKOrErr() ([]*Book, error) {
	if e.loadedTypes[0] {
		return e.BOOKSTATUSBOOK, nil
	}
	return nil, &NotLoadedError{edge: "BOOKSTATUS_BOOK"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bookstatus) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // BOOKSTATUSDATA
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bookstatus fields.
func (b *Bookstatus) assignValues(values ...interface{}) error {
	if m, n := len(values), len(bookstatus.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	b.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field BOOKSTATUSDATA", values[0])
	} else if value.Valid {
		b.BOOKSTATUSDATA = value.String
	}
	return nil
}

// QueryBOOKSTATUSBOOK queries the BOOKSTATUS_BOOK edge of the Bookstatus.
func (b *Bookstatus) QueryBOOKSTATUSBOOK() *BookQuery {
	return (&BookstatusClient{config: b.config}).QueryBOOKSTATUSBOOK(b)
}

// Update returns a builder for updating this Bookstatus.
// Note that, you need to call Bookstatus.Unwrap() before calling this method, if this Bookstatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bookstatus) Update() *BookstatusUpdateOne {
	return (&BookstatusClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (b *Bookstatus) Unwrap() *Bookstatus {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bookstatus is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bookstatus) String() string {
	var builder strings.Builder
	builder.WriteString("Bookstatus(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", BOOKSTATUSDATA=")
	builder.WriteString(b.BOOKSTATUSDATA)
	builder.WriteByte(')')
	return builder.String()
}

// Bookstatuses is a parsable slice of Bookstatus.
type Bookstatuses []*Bookstatus

func (b Bookstatuses) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
