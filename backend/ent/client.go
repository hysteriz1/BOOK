// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/m16_z/app/ent/migrate"

	"github.com/m16_z/app/ent/book"
	"github.com/m16_z/app/ent/bookstatus"
	"github.com/m16_z/app/ent/room"
	"github.com/m16_z/app/ent/roominfo"
	"github.com/m16_z/app/ent/roomstatus"
	"github.com/m16_z/app/ent/roomtype"
	"github.com/m16_z/app/ent/user"
	"github.com/m16_z/app/ent/userstatus"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Book is the client for interacting with the Book builders.
	Book *BookClient
	// Bookstatus is the client for interacting with the Bookstatus builders.
	Bookstatus *BookstatusClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// RoomInfo is the client for interacting with the RoomInfo builders.
	RoomInfo *RoomInfoClient
	// RoomStatus is the client for interacting with the RoomStatus builders.
	RoomStatus *RoomStatusClient
	// RoomType is the client for interacting with the RoomType builders.
	RoomType *RoomTypeClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserStatus is the client for interacting with the UserStatus builders.
	UserStatus *UserStatusClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Book = NewBookClient(c.config)
	c.Bookstatus = NewBookstatusClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.RoomInfo = NewRoomInfoClient(c.config)
	c.RoomStatus = NewRoomStatusClient(c.config)
	c.RoomType = NewRoomTypeClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserStatus = NewUserStatusClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Book:       NewBookClient(cfg),
		Bookstatus: NewBookstatusClient(cfg),
		Room:       NewRoomClient(cfg),
		RoomInfo:   NewRoomInfoClient(cfg),
		RoomStatus: NewRoomStatusClient(cfg),
		RoomType:   NewRoomTypeClient(cfg),
		User:       NewUserClient(cfg),
		UserStatus: NewUserStatusClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		Book:       NewBookClient(cfg),
		Bookstatus: NewBookstatusClient(cfg),
		Room:       NewRoomClient(cfg),
		RoomInfo:   NewRoomInfoClient(cfg),
		RoomStatus: NewRoomStatusClient(cfg),
		RoomType:   NewRoomTypeClient(cfg),
		User:       NewUserClient(cfg),
		UserStatus: NewUserStatusClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Book.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Book.Use(hooks...)
	c.Bookstatus.Use(hooks...)
	c.Room.Use(hooks...)
	c.RoomInfo.Use(hooks...)
	c.RoomStatus.Use(hooks...)
	c.RoomType.Use(hooks...)
	c.User.Use(hooks...)
	c.UserStatus.Use(hooks...)
}

// BookClient is a client for the Book schema.
type BookClient struct {
	config
}

// NewBookClient returns a client for the Book from the given config.
func NewBookClient(c config) *BookClient {
	return &BookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `book.Hooks(f(g(h())))`.
func (c *BookClient) Use(hooks ...Hook) {
	c.hooks.Book = append(c.hooks.Book, hooks...)
}

// Create returns a create builder for Book.
func (c *BookClient) Create() *BookCreate {
	mutation := newBookMutation(c.config, OpCreate)
	return &BookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Book.
func (c *BookClient) Update() *BookUpdate {
	mutation := newBookMutation(c.config, OpUpdate)
	return &BookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookClient) UpdateOne(b *Book) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBook(b))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookClient) UpdateOneID(id int) *BookUpdateOne {
	mutation := newBookMutation(c.config, OpUpdateOne, withBookID(id))
	return &BookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Book.
func (c *BookClient) Delete() *BookDelete {
	mutation := newBookMutation(c.config, OpDelete)
	return &BookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BookClient) DeleteOne(b *Book) *BookDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BookClient) DeleteOneID(id int) *BookDeleteOne {
	builder := c.Delete().Where(book.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookDeleteOne{builder}
}

// Create returns a query builder for Book.
func (c *BookClient) Query() *BookQuery {
	return &BookQuery{config: c.config}
}

// Get returns a Book entity by its id.
func (c *BookClient) Get(ctx context.Context, id int) (*Book, error) {
	return c.Query().Where(book.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookClient) GetX(ctx context.Context, id int) *Book {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryBOOKUSER queries the BOOK_USER edge of a Book.
func (c *BookClient) QueryBOOKUSER(b *Book) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, book.BOOKUSERTable, book.BOOKUSERColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBOOKROOM queries the BOOK_ROOM edge of a Book.
func (c *BookClient) QueryBOOKROOM(b *Book) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, book.BOOKROOMTable, book.BOOKROOMColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBOOKBOOKSTATUS queries the BOOK_BOOKSTATUS edge of a Book.
func (c *BookClient) QueryBOOKBOOKSTATUS(b *Book) *BookstatusQuery {
	query := &BookstatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(book.Table, book.FieldID, id),
			sqlgraph.To(bookstatus.Table, bookstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, book.BOOKBOOKSTATUSTable, book.BOOKBOOKSTATUSColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookClient) Hooks() []Hook {
	return c.hooks.Book
}

// BookstatusClient is a client for the Bookstatus schema.
type BookstatusClient struct {
	config
}

// NewBookstatusClient returns a client for the Bookstatus from the given config.
func NewBookstatusClient(c config) *BookstatusClient {
	return &BookstatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bookstatus.Hooks(f(g(h())))`.
func (c *BookstatusClient) Use(hooks ...Hook) {
	c.hooks.Bookstatus = append(c.hooks.Bookstatus, hooks...)
}

// Create returns a create builder for Bookstatus.
func (c *BookstatusClient) Create() *BookstatusCreate {
	mutation := newBookstatusMutation(c.config, OpCreate)
	return &BookstatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Bookstatus.
func (c *BookstatusClient) Update() *BookstatusUpdate {
	mutation := newBookstatusMutation(c.config, OpUpdate)
	return &BookstatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BookstatusClient) UpdateOne(b *Bookstatus) *BookstatusUpdateOne {
	mutation := newBookstatusMutation(c.config, OpUpdateOne, withBookstatus(b))
	return &BookstatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BookstatusClient) UpdateOneID(id int) *BookstatusUpdateOne {
	mutation := newBookstatusMutation(c.config, OpUpdateOne, withBookstatusID(id))
	return &BookstatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Bookstatus.
func (c *BookstatusClient) Delete() *BookstatusDelete {
	mutation := newBookstatusMutation(c.config, OpDelete)
	return &BookstatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BookstatusClient) DeleteOne(b *Bookstatus) *BookstatusDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BookstatusClient) DeleteOneID(id int) *BookstatusDeleteOne {
	builder := c.Delete().Where(bookstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BookstatusDeleteOne{builder}
}

// Create returns a query builder for Bookstatus.
func (c *BookstatusClient) Query() *BookstatusQuery {
	return &BookstatusQuery{config: c.config}
}

// Get returns a Bookstatus entity by its id.
func (c *BookstatusClient) Get(ctx context.Context, id int) (*Bookstatus, error) {
	return c.Query().Where(bookstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BookstatusClient) GetX(ctx context.Context, id int) *Bookstatus {
	b, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return b
}

// QueryBOOKSTATUSBOOK queries the BOOKSTATUS_BOOK edge of a Bookstatus.
func (c *BookstatusClient) QueryBOOKSTATUSBOOK(b *Bookstatus) *BookQuery {
	query := &BookQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bookstatus.Table, bookstatus.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bookstatus.BOOKSTATUSBOOKTable, bookstatus.BOOKSTATUSBOOKColumn),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BookstatusClient) Hooks() []Hook {
	return c.hooks.Bookstatus
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Create returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	r, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return r
}

// QueryROOMBOOK queries the ROOM_BOOK edge of a Room.
func (c *RoomClient) QueryROOMBOOK(r *Room) *BookQuery {
	query := &BookQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.ROOMBOOKTable, room.ROOMBOOKColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryROOMROOMTYPE queries the ROOM_ROOMTYPE edge of a Room.
func (c *RoomClient) QueryROOMROOMTYPE(r *Room) *RoomTypeQuery {
	query := &RoomTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomtype.Table, roomtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.ROOMROOMTYPETable, room.ROOMROOMTYPEColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryROOMSTATUS queries the ROOM_STATUS edge of a Room.
func (c *RoomClient) QueryROOMSTATUS(r *Room) *RoomStatusQuery {
	query := &RoomStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roomstatus.Table, roomstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.ROOMSTATUSTable, room.ROOMSTATUSColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryROOMINFO queries the ROOM_INFO edge of a Room.
func (c *RoomClient) QueryROOMINFO(r *Room) *RoomInfoQuery {
	query := &RoomInfoQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(roominfo.Table, roominfo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, room.ROOMINFOTable, room.ROOMINFOColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// RoomInfoClient is a client for the RoomInfo schema.
type RoomInfoClient struct {
	config
}

// NewRoomInfoClient returns a client for the RoomInfo from the given config.
func NewRoomInfoClient(c config) *RoomInfoClient {
	return &RoomInfoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roominfo.Hooks(f(g(h())))`.
func (c *RoomInfoClient) Use(hooks ...Hook) {
	c.hooks.RoomInfo = append(c.hooks.RoomInfo, hooks...)
}

// Create returns a create builder for RoomInfo.
func (c *RoomInfoClient) Create() *RoomInfoCreate {
	mutation := newRoomInfoMutation(c.config, OpCreate)
	return &RoomInfoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomInfo.
func (c *RoomInfoClient) Update() *RoomInfoUpdate {
	mutation := newRoomInfoMutation(c.config, OpUpdate)
	return &RoomInfoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomInfoClient) UpdateOne(ri *RoomInfo) *RoomInfoUpdateOne {
	mutation := newRoomInfoMutation(c.config, OpUpdateOne, withRoomInfo(ri))
	return &RoomInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomInfoClient) UpdateOneID(id int) *RoomInfoUpdateOne {
	mutation := newRoomInfoMutation(c.config, OpUpdateOne, withRoomInfoID(id))
	return &RoomInfoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomInfo.
func (c *RoomInfoClient) Delete() *RoomInfoDelete {
	mutation := newRoomInfoMutation(c.config, OpDelete)
	return &RoomInfoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomInfoClient) DeleteOne(ri *RoomInfo) *RoomInfoDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomInfoClient) DeleteOneID(id int) *RoomInfoDeleteOne {
	builder := c.Delete().Where(roominfo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomInfoDeleteOne{builder}
}

// Create returns a query builder for RoomInfo.
func (c *RoomInfoClient) Query() *RoomInfoQuery {
	return &RoomInfoQuery{config: c.config}
}

// Get returns a RoomInfo entity by its id.
func (c *RoomInfoClient) Get(ctx context.Context, id int) (*RoomInfo, error) {
	return c.Query().Where(roominfo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomInfoClient) GetX(ctx context.Context, id int) *RoomInfo {
	ri, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return ri
}

// QueryINFOROOM queries the INFO_ROOM edge of a RoomInfo.
func (c *RoomInfoClient) QueryINFOROOM(ri *RoomInfo) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ri.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roominfo.Table, roominfo.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roominfo.INFOROOMTable, roominfo.INFOROOMColumn),
		)
		fromV = sqlgraph.Neighbors(ri.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomInfoClient) Hooks() []Hook {
	return c.hooks.RoomInfo
}

// RoomStatusClient is a client for the RoomStatus schema.
type RoomStatusClient struct {
	config
}

// NewRoomStatusClient returns a client for the RoomStatus from the given config.
func NewRoomStatusClient(c config) *RoomStatusClient {
	return &RoomStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomstatus.Hooks(f(g(h())))`.
func (c *RoomStatusClient) Use(hooks ...Hook) {
	c.hooks.RoomStatus = append(c.hooks.RoomStatus, hooks...)
}

// Create returns a create builder for RoomStatus.
func (c *RoomStatusClient) Create() *RoomStatusCreate {
	mutation := newRoomStatusMutation(c.config, OpCreate)
	return &RoomStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomStatus.
func (c *RoomStatusClient) Update() *RoomStatusUpdate {
	mutation := newRoomStatusMutation(c.config, OpUpdate)
	return &RoomStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomStatusClient) UpdateOne(rs *RoomStatus) *RoomStatusUpdateOne {
	mutation := newRoomStatusMutation(c.config, OpUpdateOne, withRoomStatus(rs))
	return &RoomStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomStatusClient) UpdateOneID(id int) *RoomStatusUpdateOne {
	mutation := newRoomStatusMutation(c.config, OpUpdateOne, withRoomStatusID(id))
	return &RoomStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomStatus.
func (c *RoomStatusClient) Delete() *RoomStatusDelete {
	mutation := newRoomStatusMutation(c.config, OpDelete)
	return &RoomStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomStatusClient) DeleteOne(rs *RoomStatus) *RoomStatusDeleteOne {
	return c.DeleteOneID(rs.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomStatusClient) DeleteOneID(id int) *RoomStatusDeleteOne {
	builder := c.Delete().Where(roomstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomStatusDeleteOne{builder}
}

// Create returns a query builder for RoomStatus.
func (c *RoomStatusClient) Query() *RoomStatusQuery {
	return &RoomStatusQuery{config: c.config}
}

// Get returns a RoomStatus entity by its id.
func (c *RoomStatusClient) Get(ctx context.Context, id int) (*RoomStatus, error) {
	return c.Query().Where(roomstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomStatusClient) GetX(ctx context.Context, id int) *RoomStatus {
	rs, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rs
}

// QuerySTATUSROOM queries the STATUS_ROOM edge of a RoomStatus.
func (c *RoomStatusClient) QuerySTATUSROOM(rs *RoomStatus) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomstatus.Table, roomstatus.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomstatus.STATUSROOMTable, roomstatus.STATUSROOMColumn),
		)
		fromV = sqlgraph.Neighbors(rs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomStatusClient) Hooks() []Hook {
	return c.hooks.RoomStatus
}

// RoomTypeClient is a client for the RoomType schema.
type RoomTypeClient struct {
	config
}

// NewRoomTypeClient returns a client for the RoomType from the given config.
func NewRoomTypeClient(c config) *RoomTypeClient {
	return &RoomTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `roomtype.Hooks(f(g(h())))`.
func (c *RoomTypeClient) Use(hooks ...Hook) {
	c.hooks.RoomType = append(c.hooks.RoomType, hooks...)
}

// Create returns a create builder for RoomType.
func (c *RoomTypeClient) Create() *RoomTypeCreate {
	mutation := newRoomTypeMutation(c.config, OpCreate)
	return &RoomTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for RoomType.
func (c *RoomTypeClient) Update() *RoomTypeUpdate {
	mutation := newRoomTypeMutation(c.config, OpUpdate)
	return &RoomTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomTypeClient) UpdateOne(rt *RoomType) *RoomTypeUpdateOne {
	mutation := newRoomTypeMutation(c.config, OpUpdateOne, withRoomType(rt))
	return &RoomTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomTypeClient) UpdateOneID(id int) *RoomTypeUpdateOne {
	mutation := newRoomTypeMutation(c.config, OpUpdateOne, withRoomTypeID(id))
	return &RoomTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RoomType.
func (c *RoomTypeClient) Delete() *RoomTypeDelete {
	mutation := newRoomTypeMutation(c.config, OpDelete)
	return &RoomTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomTypeClient) DeleteOne(rt *RoomType) *RoomTypeDeleteOne {
	return c.DeleteOneID(rt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomTypeClient) DeleteOneID(id int) *RoomTypeDeleteOne {
	builder := c.Delete().Where(roomtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomTypeDeleteOne{builder}
}

// Create returns a query builder for RoomType.
func (c *RoomTypeClient) Query() *RoomTypeQuery {
	return &RoomTypeQuery{config: c.config}
}

// Get returns a RoomType entity by its id.
func (c *RoomTypeClient) Get(ctx context.Context, id int) (*RoomType, error) {
	return c.Query().Where(roomtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomTypeClient) GetX(ctx context.Context, id int) *RoomType {
	rt, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return rt
}

// QueryROOMTYPEROOM queries the ROOMTYPE_ROOM edge of a RoomType.
func (c *RoomTypeClient) QueryROOMTYPEROOM(rt *RoomType) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(roomtype.Table, roomtype.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, roomtype.ROOMTYPEROOMTable, roomtype.ROOMTYPEROOMColumn),
		)
		fromV = sqlgraph.Neighbors(rt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomTypeClient) Hooks() []Hook {
	return c.hooks.RoomType
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Create returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	u, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return u
}

// QueryUSERBOOK queries the USER_BOOK edge of a User.
func (c *UserClient) QueryUSERBOOK(u *User) *BookQuery {
	query := &BookQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(book.Table, book.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.USERBOOKTable, user.USERBOOKColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUSERUSERSTATUS queries the USER_USERSTATUS edge of a User.
func (c *UserClient) QueryUSERUSERSTATUS(u *User) *UserStatusQuery {
	query := &UserStatusQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(userstatus.Table, userstatus.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, user.USERUSERSTATUSTable, user.USERUSERSTATUSColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// UserStatusClient is a client for the UserStatus schema.
type UserStatusClient struct {
	config
}

// NewUserStatusClient returns a client for the UserStatus from the given config.
func NewUserStatusClient(c config) *UserStatusClient {
	return &UserStatusClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userstatus.Hooks(f(g(h())))`.
func (c *UserStatusClient) Use(hooks ...Hook) {
	c.hooks.UserStatus = append(c.hooks.UserStatus, hooks...)
}

// Create returns a create builder for UserStatus.
func (c *UserStatusClient) Create() *UserStatusCreate {
	mutation := newUserStatusMutation(c.config, OpCreate)
	return &UserStatusCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for UserStatus.
func (c *UserStatusClient) Update() *UserStatusUpdate {
	mutation := newUserStatusMutation(c.config, OpUpdate)
	return &UserStatusUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserStatusClient) UpdateOne(us *UserStatus) *UserStatusUpdateOne {
	mutation := newUserStatusMutation(c.config, OpUpdateOne, withUserStatus(us))
	return &UserStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserStatusClient) UpdateOneID(id int) *UserStatusUpdateOne {
	mutation := newUserStatusMutation(c.config, OpUpdateOne, withUserStatusID(id))
	return &UserStatusUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserStatus.
func (c *UserStatusClient) Delete() *UserStatusDelete {
	mutation := newUserStatusMutation(c.config, OpDelete)
	return &UserStatusDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserStatusClient) DeleteOne(us *UserStatus) *UserStatusDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserStatusClient) DeleteOneID(id int) *UserStatusDeleteOne {
	builder := c.Delete().Where(userstatus.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserStatusDeleteOne{builder}
}

// Create returns a query builder for UserStatus.
func (c *UserStatusClient) Query() *UserStatusQuery {
	return &UserStatusQuery{config: c.config}
}

// Get returns a UserStatus entity by its id.
func (c *UserStatusClient) Get(ctx context.Context, id int) (*UserStatus, error) {
	return c.Query().Where(userstatus.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserStatusClient) GetX(ctx context.Context, id int) *UserStatus {
	us, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return us
}

// QueryUSERSTATUSUSER queries the USERSTATUS_USER edge of a UserStatus.
func (c *UserStatusClient) QueryUSERSTATUSUSER(us *UserStatus) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(userstatus.Table, userstatus.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, userstatus.USERSTATUSUSERTable, userstatus.USERSTATUSUSERColumn),
		)
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserStatusClient) Hooks() []Hook {
	return c.hooks.UserStatus
}
