// Code generated by entc, DO NOT EDIT.

package room

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/m16_z/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ROOMNAME applies equality check predicate on the "ROOMNAME" field. It's identical to ROOMNAMEEQ.
func ROOMNAME(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEEQ applies the EQ predicate on the "ROOMNAME" field.
func ROOMNAMEEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMENEQ applies the NEQ predicate on the "ROOMNAME" field.
func ROOMNAMENEQ(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEIn applies the In predicate on the "ROOMNAME" field.
func ROOMNAMEIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldROOMNAME), v...))
	})
}

// ROOMNAMENotIn applies the NotIn predicate on the "ROOMNAME" field.
func ROOMNAMENotIn(vs ...string) predicate.Room {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Room(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldROOMNAME), v...))
	})
}

// ROOMNAMEGT applies the GT predicate on the "ROOMNAME" field.
func ROOMNAMEGT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEGTE applies the GTE predicate on the "ROOMNAME" field.
func ROOMNAMEGTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMELT applies the LT predicate on the "ROOMNAME" field.
func ROOMNAMELT(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMELTE applies the LTE predicate on the "ROOMNAME" field.
func ROOMNAMELTE(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEContains applies the Contains predicate on the "ROOMNAME" field.
func ROOMNAMEContains(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEHasPrefix applies the HasPrefix predicate on the "ROOMNAME" field.
func ROOMNAMEHasPrefix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEHasSuffix applies the HasSuffix predicate on the "ROOMNAME" field.
func ROOMNAMEHasSuffix(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEEqualFold applies the EqualFold predicate on the "ROOMNAME" field.
func ROOMNAMEEqualFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldROOMNAME), v))
	})
}

// ROOMNAMEContainsFold applies the ContainsFold predicate on the "ROOMNAME" field.
func ROOMNAMEContainsFold(v string) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldROOMNAME), v))
	})
}

// HasROOMBOOK applies the HasEdge predicate on the "ROOM_BOOK" edge.
func HasROOMBOOK() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMBOOKTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ROOMBOOKTable, ROOMBOOKColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasROOMBOOKWith applies the HasEdge predicate on the "ROOM_BOOK" edge with a given conditions (other predicates).
func HasROOMBOOKWith(preds ...predicate.Book) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMBOOKInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ROOMBOOKTable, ROOMBOOKColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasROOMROOMTYPE applies the HasEdge predicate on the "ROOM_ROOMTYPE" edge.
func HasROOMROOMTYPE() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMROOMTYPETable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ROOMROOMTYPETable, ROOMROOMTYPEColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasROOMROOMTYPEWith applies the HasEdge predicate on the "ROOM_ROOMTYPE" edge with a given conditions (other predicates).
func HasROOMROOMTYPEWith(preds ...predicate.RoomType) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMROOMTYPEInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ROOMROOMTYPETable, ROOMROOMTYPEColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasROOMSTATUS applies the HasEdge predicate on the "ROOM_STATUS" edge.
func HasROOMSTATUS() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMSTATUSTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ROOMSTATUSTable, ROOMSTATUSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasROOMSTATUSWith applies the HasEdge predicate on the "ROOM_STATUS" edge with a given conditions (other predicates).
func HasROOMSTATUSWith(preds ...predicate.RoomStatus) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMSTATUSInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ROOMSTATUSTable, ROOMSTATUSColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasROOMINFO applies the HasEdge predicate on the "ROOM_INFO" edge.
func HasROOMINFO() predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMINFOTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ROOMINFOTable, ROOMINFOColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasROOMINFOWith applies the HasEdge predicate on the "ROOM_INFO" edge with a given conditions (other predicates).
func HasROOMINFOWith(preds ...predicate.RoomInfo) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ROOMINFOInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ROOMINFOTable, ROOMINFOColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Room) predicate.Room {
	return predicate.Room(func(s *sql.Selector) {
		p(s.Not())
	})
}
