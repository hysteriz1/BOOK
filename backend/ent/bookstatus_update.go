// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/m16_z/app/ent/book"
	"github.com/m16_z/app/ent/bookstatus"
	"github.com/m16_z/app/ent/predicate"
)

// BookstatusUpdate is the builder for updating Bookstatus entities.
type BookstatusUpdate struct {
	config
	hooks      []Hook
	mutation   *BookstatusMutation
	predicates []predicate.Bookstatus
}

// Where adds a new predicate for the builder.
func (bu *BookstatusUpdate) Where(ps ...predicate.Bookstatus) *BookstatusUpdate {
	bu.predicates = append(bu.predicates, ps...)
	return bu
}

// SetBOOKSTATUSDATA sets the BOOKSTATUSDATA field.
func (bu *BookstatusUpdate) SetBOOKSTATUSDATA(s string) *BookstatusUpdate {
	bu.mutation.SetBOOKSTATUSDATA(s)
	return bu
}

// AddBOOKSTATUSBOOKIDs adds the BOOKSTATUS_BOOK edge to Book by ids.
func (bu *BookstatusUpdate) AddBOOKSTATUSBOOKIDs(ids ...int) *BookstatusUpdate {
	bu.mutation.AddBOOKSTATUSBOOKIDs(ids...)
	return bu
}

// AddBOOKSTATUSBOOK adds the BOOKSTATUS_BOOK edges to Book.
func (bu *BookstatusUpdate) AddBOOKSTATUSBOOK(b ...*Book) *BookstatusUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddBOOKSTATUSBOOKIDs(ids...)
}

// Mutation returns the BookstatusMutation object of the builder.
func (bu *BookstatusUpdate) Mutation() *BookstatusMutation {
	return bu.mutation
}

// RemoveBOOKSTATUSBOOKIDs removes the BOOKSTATUS_BOOK edge to Book by ids.
func (bu *BookstatusUpdate) RemoveBOOKSTATUSBOOKIDs(ids ...int) *BookstatusUpdate {
	bu.mutation.RemoveBOOKSTATUSBOOKIDs(ids...)
	return bu
}

// RemoveBOOKSTATUSBOOK removes BOOKSTATUS_BOOK edges to Book.
func (bu *BookstatusUpdate) RemoveBOOKSTATUSBOOK(b ...*Book) *BookstatusUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveBOOKSTATUSBOOKIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (bu *BookstatusUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := bu.mutation.BOOKSTATUSDATA(); ok {
		if err := bookstatus.BOOKSTATUSDATAValidator(v); err != nil {
			return 0, &ValidationError{Name: "BOOKSTATUSDATA", err: fmt.Errorf("ent: validator failed for field \"BOOKSTATUSDATA\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookstatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookstatusUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookstatusUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookstatusUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BookstatusUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookstatus.Table,
			Columns: bookstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookstatus.FieldID,
			},
		},
	}
	if ps := bu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BOOKSTATUSDATA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookstatus.FieldBOOKSTATUSDATA,
		})
	}
	if nodes := bu.mutation.RemovedBOOKSTATUSBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bookstatus.BOOKSTATUSBOOKTable,
			Columns: []string{bookstatus.BOOKSTATUSBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.BOOKSTATUSBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bookstatus.BOOKSTATUSBOOKTable,
			Columns: []string{bookstatus.BOOKSTATUSBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// BookstatusUpdateOne is the builder for updating a single Bookstatus entity.
type BookstatusUpdateOne struct {
	config
	hooks    []Hook
	mutation *BookstatusMutation
}

// SetBOOKSTATUSDATA sets the BOOKSTATUSDATA field.
func (buo *BookstatusUpdateOne) SetBOOKSTATUSDATA(s string) *BookstatusUpdateOne {
	buo.mutation.SetBOOKSTATUSDATA(s)
	return buo
}

// AddBOOKSTATUSBOOKIDs adds the BOOKSTATUS_BOOK edge to Book by ids.
func (buo *BookstatusUpdateOne) AddBOOKSTATUSBOOKIDs(ids ...int) *BookstatusUpdateOne {
	buo.mutation.AddBOOKSTATUSBOOKIDs(ids...)
	return buo
}

// AddBOOKSTATUSBOOK adds the BOOKSTATUS_BOOK edges to Book.
func (buo *BookstatusUpdateOne) AddBOOKSTATUSBOOK(b ...*Book) *BookstatusUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddBOOKSTATUSBOOKIDs(ids...)
}

// Mutation returns the BookstatusMutation object of the builder.
func (buo *BookstatusUpdateOne) Mutation() *BookstatusMutation {
	return buo.mutation
}

// RemoveBOOKSTATUSBOOKIDs removes the BOOKSTATUS_BOOK edge to Book by ids.
func (buo *BookstatusUpdateOne) RemoveBOOKSTATUSBOOKIDs(ids ...int) *BookstatusUpdateOne {
	buo.mutation.RemoveBOOKSTATUSBOOKIDs(ids...)
	return buo
}

// RemoveBOOKSTATUSBOOK removes BOOKSTATUS_BOOK edges to Book.
func (buo *BookstatusUpdateOne) RemoveBOOKSTATUSBOOK(b ...*Book) *BookstatusUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveBOOKSTATUSBOOKIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (buo *BookstatusUpdateOne) Save(ctx context.Context) (*Bookstatus, error) {
	if v, ok := buo.mutation.BOOKSTATUSDATA(); ok {
		if err := bookstatus.BOOKSTATUSDATAValidator(v); err != nil {
			return nil, &ValidationError{Name: "BOOKSTATUSDATA", err: fmt.Errorf("ent: validator failed for field \"BOOKSTATUSDATA\": %w", err)}
		}
	}

	var (
		err  error
		node *Bookstatus
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookstatusMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookstatusUpdateOne) SaveX(ctx context.Context) *Bookstatus {
	b, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return b
}

// Exec executes the query on the entity.
func (buo *BookstatusUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookstatusUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BookstatusUpdateOne) sqlSave(ctx context.Context) (b *Bookstatus, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   bookstatus.Table,
			Columns: bookstatus.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: bookstatus.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Bookstatus.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := buo.mutation.BOOKSTATUSDATA(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: bookstatus.FieldBOOKSTATUSDATA,
		})
	}
	if nodes := buo.mutation.RemovedBOOKSTATUSBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bookstatus.BOOKSTATUSBOOKTable,
			Columns: []string{bookstatus.BOOKSTATUSBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.BOOKSTATUSBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bookstatus.BOOKSTATUSBOOKTable,
			Columns: []string{bookstatus.BOOKSTATUSBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	b = &Bookstatus{config: buo.config}
	_spec.Assign = b.assignValues
	_spec.ScanValues = b.scanValues()
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{bookstatus.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return b, nil
}
