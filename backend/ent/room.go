// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/m16_z/app/ent/room"
	"github.com/m16_z/app/ent/roominfo"
	"github.com/m16_z/app/ent/roomstatus"
	"github.com/m16_z/app/ent/roomtype"
)

// Room is the model entity for the Room schema.
type Room struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ROOMNAME holds the value of the "ROOMNAME" field.
	ROOMNAME string `json:"ROOMNAME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoomQuery when eager-loading is set.
	Edges                   RoomEdges `json:"edges"`
	room_info_info_room     *int
	room_status_status_room *int
	room_type_roomtype_room *int
}

// RoomEdges holds the relations/edges for other nodes in the graph.
type RoomEdges struct {
	// ROOMBOOK holds the value of the ROOM_BOOK edge.
	ROOMBOOK []*Book
	// ROOMROOMTYPE holds the value of the ROOM_ROOMTYPE edge.
	ROOMROOMTYPE *RoomType
	// ROOMSTATUS holds the value of the ROOM_STATUS edge.
	ROOMSTATUS *RoomStatus
	// ROOMINFO holds the value of the ROOM_INFO edge.
	ROOMINFO *RoomInfo
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ROOMBOOKOrErr returns the ROOMBOOK value or an error if the edge
// was not loaded in eager-loading.
func (e RoomEdges) ROOMBOOKOrErr() ([]*Book, error) {
	if e.loadedTypes[0] {
		return e.ROOMBOOK, nil
	}
	return nil, &NotLoadedError{edge: "ROOM_BOOK"}
}

// ROOMROOMTYPEOrErr returns the ROOMROOMTYPE value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) ROOMROOMTYPEOrErr() (*RoomType, error) {
	if e.loadedTypes[1] {
		if e.ROOMROOMTYPE == nil {
			// The edge ROOM_ROOMTYPE was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomtype.Label}
		}
		return e.ROOMROOMTYPE, nil
	}
	return nil, &NotLoadedError{edge: "ROOM_ROOMTYPE"}
}

// ROOMSTATUSOrErr returns the ROOMSTATUS value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) ROOMSTATUSOrErr() (*RoomStatus, error) {
	if e.loadedTypes[2] {
		if e.ROOMSTATUS == nil {
			// The edge ROOM_STATUS was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roomstatus.Label}
		}
		return e.ROOMSTATUS, nil
	}
	return nil, &NotLoadedError{edge: "ROOM_STATUS"}
}

// ROOMINFOOrErr returns the ROOMINFO value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RoomEdges) ROOMINFOOrErr() (*RoomInfo, error) {
	if e.loadedTypes[3] {
		if e.ROOMINFO == nil {
			// The edge ROOM_INFO was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: roominfo.Label}
		}
		return e.ROOMINFO, nil
	}
	return nil, &NotLoadedError{edge: "ROOM_INFO"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Room) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // ROOMNAME
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Room) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // room_info_info_room
		&sql.NullInt64{}, // room_status_status_room
		&sql.NullInt64{}, // room_type_roomtype_room
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Room fields.
func (r *Room) assignValues(values ...interface{}) error {
	if m, n := len(values), len(room.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field ROOMNAME", values[0])
	} else if value.Valid {
		r.ROOMNAME = value.String
	}
	values = values[1:]
	if len(values) == len(room.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_info_info_room", value)
		} else if value.Valid {
			r.room_info_info_room = new(int)
			*r.room_info_info_room = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_status_status_room", value)
		} else if value.Valid {
			r.room_status_status_room = new(int)
			*r.room_status_status_room = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field room_type_roomtype_room", value)
		} else if value.Valid {
			r.room_type_roomtype_room = new(int)
			*r.room_type_roomtype_room = int(value.Int64)
		}
	}
	return nil
}

// QueryROOMBOOK queries the ROOM_BOOK edge of the Room.
func (r *Room) QueryROOMBOOK() *BookQuery {
	return (&RoomClient{config: r.config}).QueryROOMBOOK(r)
}

// QueryROOMROOMTYPE queries the ROOM_ROOMTYPE edge of the Room.
func (r *Room) QueryROOMROOMTYPE() *RoomTypeQuery {
	return (&RoomClient{config: r.config}).QueryROOMROOMTYPE(r)
}

// QueryROOMSTATUS queries the ROOM_STATUS edge of the Room.
func (r *Room) QueryROOMSTATUS() *RoomStatusQuery {
	return (&RoomClient{config: r.config}).QueryROOMSTATUS(r)
}

// QueryROOMINFO queries the ROOM_INFO edge of the Room.
func (r *Room) QueryROOMINFO() *RoomInfoQuery {
	return (&RoomClient{config: r.config}).QueryROOMINFO(r)
}

// Update returns a builder for updating this Room.
// Note that, you need to call Room.Unwrap() before calling this method, if this Room
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Room) Update() *RoomUpdateOne {
	return (&RoomClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Room) Unwrap() *Room {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Room is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Room) String() string {
	var builder strings.Builder
	builder.WriteString("Room(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", ROOMNAME=")
	builder.WriteString(r.ROOMNAME)
	builder.WriteByte(')')
	return builder.String()
}

// Rooms is a parsable slice of Room.
type Rooms []*Room

func (r Rooms) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
