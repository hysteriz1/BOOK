// Code generated by entc, DO NOT EDIT.

package book

import (
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/m16_z/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RESERVATIONS applies equality check predicate on the "RESERVATIONS" field. It's identical to RESERVATIONSEQ.
func RESERVATIONS(v time.Time) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRESERVATIONS), v))
	})
}

// RESERVATIONSEQ applies the EQ predicate on the "RESERVATIONS" field.
func RESERVATIONSEQ(v time.Time) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRESERVATIONS), v))
	})
}

// RESERVATIONSNEQ applies the NEQ predicate on the "RESERVATIONS" field.
func RESERVATIONSNEQ(v time.Time) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRESERVATIONS), v))
	})
}

// RESERVATIONSIn applies the In predicate on the "RESERVATIONS" field.
func RESERVATIONSIn(vs ...time.Time) predicate.Book {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Book(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRESERVATIONS), v...))
	})
}

// RESERVATIONSNotIn applies the NotIn predicate on the "RESERVATIONS" field.
func RESERVATIONSNotIn(vs ...time.Time) predicate.Book {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Book(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRESERVATIONS), v...))
	})
}

// RESERVATIONSGT applies the GT predicate on the "RESERVATIONS" field.
func RESERVATIONSGT(v time.Time) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRESERVATIONS), v))
	})
}

// RESERVATIONSGTE applies the GTE predicate on the "RESERVATIONS" field.
func RESERVATIONSGTE(v time.Time) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRESERVATIONS), v))
	})
}

// RESERVATIONSLT applies the LT predicate on the "RESERVATIONS" field.
func RESERVATIONSLT(v time.Time) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRESERVATIONS), v))
	})
}

// RESERVATIONSLTE applies the LTE predicate on the "RESERVATIONS" field.
func RESERVATIONSLTE(v time.Time) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRESERVATIONS), v))
	})
}

// HasBOOKUSER applies the HasEdge predicate on the "BOOK_USER" edge.
func HasBOOKUSER() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKUSERTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKUSERTable, BOOKUSERColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBOOKUSERWith applies the HasEdge predicate on the "BOOK_USER" edge with a given conditions (other predicates).
func HasBOOKUSERWith(preds ...predicate.User) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKUSERInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKUSERTable, BOOKUSERColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBOOKROOM applies the HasEdge predicate on the "BOOK_ROOM" edge.
func HasBOOKROOM() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKROOMTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKROOMTable, BOOKROOMColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBOOKROOMWith applies the HasEdge predicate on the "BOOK_ROOM" edge with a given conditions (other predicates).
func HasBOOKROOMWith(preds ...predicate.Room) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKROOMInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKROOMTable, BOOKROOMColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBOOKBOOKSTATUS applies the HasEdge predicate on the "BOOK_BOOKSTATUS" edge.
func HasBOOKBOOKSTATUS() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKBOOKSTATUSTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKBOOKSTATUSTable, BOOKBOOKSTATUSColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBOOKBOOKSTATUSWith applies the HasEdge predicate on the "BOOK_BOOKSTATUS" edge with a given conditions (other predicates).
func HasBOOKBOOKSTATUSWith(preds ...predicate.Bookstatus) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BOOKBOOKSTATUSInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, BOOKBOOKSTATUSTable, BOOKBOOKSTATUSColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		p(s.Not())
	})
}
