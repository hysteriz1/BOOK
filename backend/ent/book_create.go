// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/m16_z/app/ent/book"
	"github.com/m16_z/app/ent/bookstatus"
	"github.com/m16_z/app/ent/room"
	"github.com/m16_z/app/ent/user"
)

// BookCreate is the builder for creating a Book entity.
type BookCreate struct {
	config
	mutation *BookMutation
	hooks    []Hook
}

// SetRESERVATIONS sets the RESERVATIONS field.
func (bc *BookCreate) SetRESERVATIONS(t time.Time) *BookCreate {
	bc.mutation.SetRESERVATIONS(t)
	return bc
}

// SetBOOKUSERID sets the BOOK_USER edge to User by id.
func (bc *BookCreate) SetBOOKUSERID(id int) *BookCreate {
	bc.mutation.SetBOOKUSERID(id)
	return bc
}

// SetNillableBOOKUSERID sets the BOOK_USER edge to User by id if the given value is not nil.
func (bc *BookCreate) SetNillableBOOKUSERID(id *int) *BookCreate {
	if id != nil {
		bc = bc.SetBOOKUSERID(*id)
	}
	return bc
}

// SetBOOKUSER sets the BOOK_USER edge to User.
func (bc *BookCreate) SetBOOKUSER(u *User) *BookCreate {
	return bc.SetBOOKUSERID(u.ID)
}

// SetBOOKROOMID sets the BOOK_ROOM edge to Room by id.
func (bc *BookCreate) SetBOOKROOMID(id int) *BookCreate {
	bc.mutation.SetBOOKROOMID(id)
	return bc
}

// SetNillableBOOKROOMID sets the BOOK_ROOM edge to Room by id if the given value is not nil.
func (bc *BookCreate) SetNillableBOOKROOMID(id *int) *BookCreate {
	if id != nil {
		bc = bc.SetBOOKROOMID(*id)
	}
	return bc
}

// SetBOOKROOM sets the BOOK_ROOM edge to Room.
func (bc *BookCreate) SetBOOKROOM(r *Room) *BookCreate {
	return bc.SetBOOKROOMID(r.ID)
}

// SetBOOKBOOKSTATUSID sets the BOOK_BOOKSTATUS edge to Bookstatus by id.
func (bc *BookCreate) SetBOOKBOOKSTATUSID(id int) *BookCreate {
	bc.mutation.SetBOOKBOOKSTATUSID(id)
	return bc
}

// SetNillableBOOKBOOKSTATUSID sets the BOOK_BOOKSTATUS edge to Bookstatus by id if the given value is not nil.
func (bc *BookCreate) SetNillableBOOKBOOKSTATUSID(id *int) *BookCreate {
	if id != nil {
		bc = bc.SetBOOKBOOKSTATUSID(*id)
	}
	return bc
}

// SetBOOKBOOKSTATUS sets the BOOK_BOOKSTATUS edge to Bookstatus.
func (bc *BookCreate) SetBOOKBOOKSTATUS(b *Bookstatus) *BookCreate {
	return bc.SetBOOKBOOKSTATUSID(b.ID)
}

// Mutation returns the BookMutation object of the builder.
func (bc *BookCreate) Mutation() *BookMutation {
	return bc.mutation
}

// Save creates the Book in the database.
func (bc *BookCreate) Save(ctx context.Context) (*Book, error) {
	if _, ok := bc.mutation.RESERVATIONS(); !ok {
		return nil, &ValidationError{Name: "RESERVATIONS", err: errors.New("ent: missing required field \"RESERVATIONS\"")}
	}
	var (
		err  error
		node *Book
	)
	if len(bc.hooks) == 0 {
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BookMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bc.mutation = mutation
			node, err = bc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BookCreate) SaveX(ctx context.Context) *Book {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (bc *BookCreate) sqlSave(ctx context.Context) (*Book, error) {
	b, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	b.ID = int(id)
	return b, nil
}

func (bc *BookCreate) createSpec() (*Book, *sqlgraph.CreateSpec) {
	var (
		b     = &Book{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: book.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: book.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.RESERVATIONS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: book.FieldRESERVATIONS,
		})
		b.RESERVATIONS = value
	}
	if nodes := bc.mutation.BOOKUSERIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.BOOKUSERTable,
			Columns: []string{book.BOOKUSERColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BOOKROOMIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.BOOKROOMTable,
			Columns: []string{book.BOOKROOMColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.BOOKBOOKSTATUSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.BOOKBOOKSTATUSTable,
			Columns: []string{book.BOOKBOOKSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bookstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return b, _spec
}
