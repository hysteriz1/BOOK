// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/m16_z/app/ent/book"
	"github.com/m16_z/app/ent/predicate"
	"github.com/m16_z/app/ent/room"
	"github.com/m16_z/app/ent/roominfo"
	"github.com/m16_z/app/ent/roomstatus"
	"github.com/m16_z/app/ent/roomtype"
)

// RoomUpdate is the builder for updating Room entities.
type RoomUpdate struct {
	config
	hooks      []Hook
	mutation   *RoomMutation
	predicates []predicate.Room
}

// Where adds a new predicate for the builder.
func (ru *RoomUpdate) Where(ps ...predicate.Room) *RoomUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetROOMNAME sets the ROOMNAME field.
func (ru *RoomUpdate) SetROOMNAME(s string) *RoomUpdate {
	ru.mutation.SetROOMNAME(s)
	return ru
}

// AddROOMBOOKIDs adds the ROOM_BOOK edge to Book by ids.
func (ru *RoomUpdate) AddROOMBOOKIDs(ids ...int) *RoomUpdate {
	ru.mutation.AddROOMBOOKIDs(ids...)
	return ru
}

// AddROOMBOOK adds the ROOM_BOOK edges to Book.
func (ru *RoomUpdate) AddROOMBOOK(b ...*Book) *RoomUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.AddROOMBOOKIDs(ids...)
}

// SetROOMROOMTYPEID sets the ROOM_ROOMTYPE edge to RoomType by id.
func (ru *RoomUpdate) SetROOMROOMTYPEID(id int) *RoomUpdate {
	ru.mutation.SetROOMROOMTYPEID(id)
	return ru
}

// SetNillableROOMROOMTYPEID sets the ROOM_ROOMTYPE edge to RoomType by id if the given value is not nil.
func (ru *RoomUpdate) SetNillableROOMROOMTYPEID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetROOMROOMTYPEID(*id)
	}
	return ru
}

// SetROOMROOMTYPE sets the ROOM_ROOMTYPE edge to RoomType.
func (ru *RoomUpdate) SetROOMROOMTYPE(r *RoomType) *RoomUpdate {
	return ru.SetROOMROOMTYPEID(r.ID)
}

// SetROOMSTATUSID sets the ROOM_STATUS edge to RoomStatus by id.
func (ru *RoomUpdate) SetROOMSTATUSID(id int) *RoomUpdate {
	ru.mutation.SetROOMSTATUSID(id)
	return ru
}

// SetNillableROOMSTATUSID sets the ROOM_STATUS edge to RoomStatus by id if the given value is not nil.
func (ru *RoomUpdate) SetNillableROOMSTATUSID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetROOMSTATUSID(*id)
	}
	return ru
}

// SetROOMSTATUS sets the ROOM_STATUS edge to RoomStatus.
func (ru *RoomUpdate) SetROOMSTATUS(r *RoomStatus) *RoomUpdate {
	return ru.SetROOMSTATUSID(r.ID)
}

// SetROOMINFOID sets the ROOM_INFO edge to RoomInfo by id.
func (ru *RoomUpdate) SetROOMINFOID(id int) *RoomUpdate {
	ru.mutation.SetROOMINFOID(id)
	return ru
}

// SetNillableROOMINFOID sets the ROOM_INFO edge to RoomInfo by id if the given value is not nil.
func (ru *RoomUpdate) SetNillableROOMINFOID(id *int) *RoomUpdate {
	if id != nil {
		ru = ru.SetROOMINFOID(*id)
	}
	return ru
}

// SetROOMINFO sets the ROOM_INFO edge to RoomInfo.
func (ru *RoomUpdate) SetROOMINFO(r *RoomInfo) *RoomUpdate {
	return ru.SetROOMINFOID(r.ID)
}

// Mutation returns the RoomMutation object of the builder.
func (ru *RoomUpdate) Mutation() *RoomMutation {
	return ru.mutation
}

// RemoveROOMBOOKIDs removes the ROOM_BOOK edge to Book by ids.
func (ru *RoomUpdate) RemoveROOMBOOKIDs(ids ...int) *RoomUpdate {
	ru.mutation.RemoveROOMBOOKIDs(ids...)
	return ru
}

// RemoveROOMBOOK removes ROOM_BOOK edges to Book.
func (ru *RoomUpdate) RemoveROOMBOOK(b ...*Book) *RoomUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.RemoveROOMBOOKIDs(ids...)
}

// ClearROOMROOMTYPE clears the ROOM_ROOMTYPE edge to RoomType.
func (ru *RoomUpdate) ClearROOMROOMTYPE() *RoomUpdate {
	ru.mutation.ClearROOMROOMTYPE()
	return ru
}

// ClearROOMSTATUS clears the ROOM_STATUS edge to RoomStatus.
func (ru *RoomUpdate) ClearROOMSTATUS() *RoomUpdate {
	ru.mutation.ClearROOMSTATUS()
	return ru
}

// ClearROOMINFO clears the ROOM_INFO edge to RoomInfo.
func (ru *RoomUpdate) ClearROOMINFO() *RoomUpdate {
	ru.mutation.ClearROOMINFO()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RoomUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := ru.mutation.ROOMNAME(); ok {
		if err := room.ROOMNAMEValidator(v); err != nil {
			return 0, &ValidationError{Name: "ROOMNAME", err: fmt.Errorf("ent: validator failed for field \"ROOMNAME\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoomUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoomUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoomUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   room.Table,
			Columns: room.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: room.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.ROOMNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: room.FieldROOMNAME,
		})
	}
	if nodes := ru.mutation.RemovedROOMBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ROOMBOOKTable,
			Columns: []string{room.ROOMBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ROOMBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ROOMBOOKTable,
			Columns: []string{room.ROOMBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ROOMROOMTYPECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMROOMTYPETable,
			Columns: []string{room.ROOMROOMTYPEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ROOMROOMTYPEIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMROOMTYPETable,
			Columns: []string{room.ROOMROOMTYPEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ROOMSTATUSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMSTATUSTable,
			Columns: []string{room.ROOMSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ROOMSTATUSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMSTATUSTable,
			Columns: []string{room.ROOMSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ROOMINFOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMINFOTable,
			Columns: []string{room.ROOMINFOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roominfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ROOMINFOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMINFOTable,
			Columns: []string{room.ROOMINFOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roominfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RoomUpdateOne is the builder for updating a single Room entity.
type RoomUpdateOne struct {
	config
	hooks    []Hook
	mutation *RoomMutation
}

// SetROOMNAME sets the ROOMNAME field.
func (ruo *RoomUpdateOne) SetROOMNAME(s string) *RoomUpdateOne {
	ruo.mutation.SetROOMNAME(s)
	return ruo
}

// AddROOMBOOKIDs adds the ROOM_BOOK edge to Book by ids.
func (ruo *RoomUpdateOne) AddROOMBOOKIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.AddROOMBOOKIDs(ids...)
	return ruo
}

// AddROOMBOOK adds the ROOM_BOOK edges to Book.
func (ruo *RoomUpdateOne) AddROOMBOOK(b ...*Book) *RoomUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.AddROOMBOOKIDs(ids...)
}

// SetROOMROOMTYPEID sets the ROOM_ROOMTYPE edge to RoomType by id.
func (ruo *RoomUpdateOne) SetROOMROOMTYPEID(id int) *RoomUpdateOne {
	ruo.mutation.SetROOMROOMTYPEID(id)
	return ruo
}

// SetNillableROOMROOMTYPEID sets the ROOM_ROOMTYPE edge to RoomType by id if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableROOMROOMTYPEID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetROOMROOMTYPEID(*id)
	}
	return ruo
}

// SetROOMROOMTYPE sets the ROOM_ROOMTYPE edge to RoomType.
func (ruo *RoomUpdateOne) SetROOMROOMTYPE(r *RoomType) *RoomUpdateOne {
	return ruo.SetROOMROOMTYPEID(r.ID)
}

// SetROOMSTATUSID sets the ROOM_STATUS edge to RoomStatus by id.
func (ruo *RoomUpdateOne) SetROOMSTATUSID(id int) *RoomUpdateOne {
	ruo.mutation.SetROOMSTATUSID(id)
	return ruo
}

// SetNillableROOMSTATUSID sets the ROOM_STATUS edge to RoomStatus by id if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableROOMSTATUSID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetROOMSTATUSID(*id)
	}
	return ruo
}

// SetROOMSTATUS sets the ROOM_STATUS edge to RoomStatus.
func (ruo *RoomUpdateOne) SetROOMSTATUS(r *RoomStatus) *RoomUpdateOne {
	return ruo.SetROOMSTATUSID(r.ID)
}

// SetROOMINFOID sets the ROOM_INFO edge to RoomInfo by id.
func (ruo *RoomUpdateOne) SetROOMINFOID(id int) *RoomUpdateOne {
	ruo.mutation.SetROOMINFOID(id)
	return ruo
}

// SetNillableROOMINFOID sets the ROOM_INFO edge to RoomInfo by id if the given value is not nil.
func (ruo *RoomUpdateOne) SetNillableROOMINFOID(id *int) *RoomUpdateOne {
	if id != nil {
		ruo = ruo.SetROOMINFOID(*id)
	}
	return ruo
}

// SetROOMINFO sets the ROOM_INFO edge to RoomInfo.
func (ruo *RoomUpdateOne) SetROOMINFO(r *RoomInfo) *RoomUpdateOne {
	return ruo.SetROOMINFOID(r.ID)
}

// Mutation returns the RoomMutation object of the builder.
func (ruo *RoomUpdateOne) Mutation() *RoomMutation {
	return ruo.mutation
}

// RemoveROOMBOOKIDs removes the ROOM_BOOK edge to Book by ids.
func (ruo *RoomUpdateOne) RemoveROOMBOOKIDs(ids ...int) *RoomUpdateOne {
	ruo.mutation.RemoveROOMBOOKIDs(ids...)
	return ruo
}

// RemoveROOMBOOK removes ROOM_BOOK edges to Book.
func (ruo *RoomUpdateOne) RemoveROOMBOOK(b ...*Book) *RoomUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.RemoveROOMBOOKIDs(ids...)
}

// ClearROOMROOMTYPE clears the ROOM_ROOMTYPE edge to RoomType.
func (ruo *RoomUpdateOne) ClearROOMROOMTYPE() *RoomUpdateOne {
	ruo.mutation.ClearROOMROOMTYPE()
	return ruo
}

// ClearROOMSTATUS clears the ROOM_STATUS edge to RoomStatus.
func (ruo *RoomUpdateOne) ClearROOMSTATUS() *RoomUpdateOne {
	ruo.mutation.ClearROOMSTATUS()
	return ruo
}

// ClearROOMINFO clears the ROOM_INFO edge to RoomInfo.
func (ruo *RoomUpdateOne) ClearROOMINFO() *RoomUpdateOne {
	ruo.mutation.ClearROOMINFO()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RoomUpdateOne) Save(ctx context.Context) (*Room, error) {
	if v, ok := ruo.mutation.ROOMNAME(); ok {
		if err := room.ROOMNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "ROOMNAME", err: fmt.Errorf("ent: validator failed for field \"ROOMNAME\": %w", err)}
		}
	}

	var (
		err  error
		node *Room
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoomUpdateOne) SaveX(ctx context.Context) *Room {
	r, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return r
}

// Exec executes the query on the entity.
func (ruo *RoomUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoomUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RoomUpdateOne) sqlSave(ctx context.Context) (r *Room, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   room.Table,
			Columns: room.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: room.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Room.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := ruo.mutation.ROOMNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: room.FieldROOMNAME,
		})
	}
	if nodes := ruo.mutation.RemovedROOMBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ROOMBOOKTable,
			Columns: []string{room.ROOMBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ROOMBOOKIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   room.ROOMBOOKTable,
			Columns: []string{room.ROOMBOOKColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: book.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ROOMROOMTYPECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMROOMTYPETable,
			Columns: []string{room.ROOMROOMTYPEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ROOMROOMTYPEIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMROOMTYPETable,
			Columns: []string{room.ROOMROOMTYPEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ROOMSTATUSCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMSTATUSTable,
			Columns: []string{room.ROOMSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomstatus.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ROOMSTATUSIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMSTATUSTable,
			Columns: []string{room.ROOMSTATUSColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roomstatus.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ROOMINFOCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMINFOTable,
			Columns: []string{room.ROOMINFOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roominfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ROOMINFOIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   room.ROOMINFOTable,
			Columns: []string{room.ROOMINFOColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roominfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	r = &Room{config: ruo.config}
	_spec.Assign = r.assignValues
	_spec.ScanValues = r.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{room.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return r, nil
}
