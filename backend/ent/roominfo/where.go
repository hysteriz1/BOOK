// Code generated by entc, DO NOT EDIT.

package roominfo

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/m16_z/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// INFOBED applies equality check predicate on the "INFOBED" field. It's identical to INFOBEDEQ.
func INFOBED(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOBED), v))
	})
}

// INFOREFRIGERAT applies equality check predicate on the "INFOREFRIGERAT" field. It's identical to INFOREFRIGERATEQ.
func INFOREFRIGERAT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOREFRIGERAT), v))
	})
}

// INFOWARDROB applies equality check predicate on the "INFOWARDROB" field. It's identical to INFOWARDROBEQ.
func INFOWARDROB(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOWARDROB), v))
	})
}

// INFOOFFICEDE applies equality check predicate on the "INFOOFFICEDE" field. It's identical to INFOOFFICEDEEQ.
func INFOOFFICEDE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOOFFICEDE), v))
	})
}

// INFOBEDEQ applies the EQ predicate on the "INFOBED" field.
func INFOBEDEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOBED), v))
	})
}

// INFOBEDNEQ applies the NEQ predicate on the "INFOBED" field.
func INFOBEDNEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldINFOBED), v))
	})
}

// INFOBEDIn applies the In predicate on the "INFOBED" field.
func INFOBEDIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldINFOBED), v...))
	})
}

// INFOBEDNotIn applies the NotIn predicate on the "INFOBED" field.
func INFOBEDNotIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldINFOBED), v...))
	})
}

// INFOBEDGT applies the GT predicate on the "INFOBED" field.
func INFOBEDGT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldINFOBED), v))
	})
}

// INFOBEDGTE applies the GTE predicate on the "INFOBED" field.
func INFOBEDGTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldINFOBED), v))
	})
}

// INFOBEDLT applies the LT predicate on the "INFOBED" field.
func INFOBEDLT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldINFOBED), v))
	})
}

// INFOBEDLTE applies the LTE predicate on the "INFOBED" field.
func INFOBEDLTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldINFOBED), v))
	})
}

// INFOREFRIGERATEQ applies the EQ predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOREFRIGERAT), v))
	})
}

// INFOREFRIGERATNEQ applies the NEQ predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATNEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldINFOREFRIGERAT), v))
	})
}

// INFOREFRIGERATIn applies the In predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldINFOREFRIGERAT), v...))
	})
}

// INFOREFRIGERATNotIn applies the NotIn predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATNotIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldINFOREFRIGERAT), v...))
	})
}

// INFOREFRIGERATGT applies the GT predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATGT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldINFOREFRIGERAT), v))
	})
}

// INFOREFRIGERATGTE applies the GTE predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATGTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldINFOREFRIGERAT), v))
	})
}

// INFOREFRIGERATLT applies the LT predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATLT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldINFOREFRIGERAT), v))
	})
}

// INFOREFRIGERATLTE applies the LTE predicate on the "INFOREFRIGERAT" field.
func INFOREFRIGERATLTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldINFOREFRIGERAT), v))
	})
}

// INFOWARDROBEQ applies the EQ predicate on the "INFOWARDROB" field.
func INFOWARDROBEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOWARDROB), v))
	})
}

// INFOWARDROBNEQ applies the NEQ predicate on the "INFOWARDROB" field.
func INFOWARDROBNEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldINFOWARDROB), v))
	})
}

// INFOWARDROBIn applies the In predicate on the "INFOWARDROB" field.
func INFOWARDROBIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldINFOWARDROB), v...))
	})
}

// INFOWARDROBNotIn applies the NotIn predicate on the "INFOWARDROB" field.
func INFOWARDROBNotIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldINFOWARDROB), v...))
	})
}

// INFOWARDROBGT applies the GT predicate on the "INFOWARDROB" field.
func INFOWARDROBGT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldINFOWARDROB), v))
	})
}

// INFOWARDROBGTE applies the GTE predicate on the "INFOWARDROB" field.
func INFOWARDROBGTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldINFOWARDROB), v))
	})
}

// INFOWARDROBLT applies the LT predicate on the "INFOWARDROB" field.
func INFOWARDROBLT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldINFOWARDROB), v))
	})
}

// INFOWARDROBLTE applies the LTE predicate on the "INFOWARDROB" field.
func INFOWARDROBLTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldINFOWARDROB), v))
	})
}

// INFOOFFICEDEEQ applies the EQ predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDEEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldINFOOFFICEDE), v))
	})
}

// INFOOFFICEDENEQ applies the NEQ predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDENEQ(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldINFOOFFICEDE), v))
	})
}

// INFOOFFICEDEIn applies the In predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDEIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldINFOOFFICEDE), v...))
	})
}

// INFOOFFICEDENotIn applies the NotIn predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDENotIn(vs ...int) predicate.RoomInfo {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RoomInfo(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldINFOOFFICEDE), v...))
	})
}

// INFOOFFICEDEGT applies the GT predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDEGT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldINFOOFFICEDE), v))
	})
}

// INFOOFFICEDEGTE applies the GTE predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDEGTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldINFOOFFICEDE), v))
	})
}

// INFOOFFICEDELT applies the LT predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDELT(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldINFOOFFICEDE), v))
	})
}

// INFOOFFICEDELTE applies the LTE predicate on the "INFOOFFICEDE" field.
func INFOOFFICEDELTE(v int) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldINFOOFFICEDE), v))
	})
}

// HasINFOROOM applies the HasEdge predicate on the "INFO_ROOM" edge.
func HasINFOROOM() predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(INFOROOMTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, INFOROOMTable, INFOROOMColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasINFOROOMWith applies the HasEdge predicate on the "INFO_ROOM" edge with a given conditions (other predicates).
func HasINFOROOMWith(preds ...predicate.Room) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(INFOROOMInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, INFOROOMTable, INFOROOMColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.RoomInfo) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.RoomInfo) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RoomInfo) predicate.RoomInfo {
	return predicate.RoomInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
