basePath: /api/v1
definitions:
  controllers.Book:
    properties:
      bookStatus:
        type: integer
      reservations:
        type: string
      room:
        type: integer
      user:
        type: integer
    type: object
  ent.Book:
    properties:
      RESERVATIONS:
        description: RESERVATIONS holds the value of the "RESERVATIONS" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BookEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BookQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BookEdges:
    properties:
      bookbookstatus:
        $ref: '#/definitions/ent.Bookstatus'
        description: BOOKBOOKSTATUS holds the value of the BOOK_BOOKSTATUS edge.
        type: object
      bookroom:
        $ref: '#/definitions/ent.Room'
        description: BOOKROOM holds the value of the BOOK_ROOM edge.
        type: object
      bookuser:
        $ref: '#/definitions/ent.User'
        description: BOOKUSER holds the value of the BOOK_USER edge.
        type: object
    type: object
  ent.Bookstatus:
    properties:
      BOOKSTATUSDATA:
        description: BOOKSTATUSDATA holds the value of the "BOOKSTATUSDATA" field.
        type: string
      edges:
        $ref: '#/definitions/ent.BookstatusEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the BookstatusQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.BookstatusEdges:
    properties:
      bookstatusbook:
        description: BOOKSTATUSBOOK holds the value of the BOOKSTATUS_BOOK edge.
        items:
          $ref: '#/definitions/ent.Book'
        type: array
    type: object
  ent.Room:
    properties:
      ROOMNAME:
        description: ROOMNAME holds the value of the "ROOMNAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoomEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoomQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoomEdges:
    properties:
      roombook:
        description: ROOMBOOK holds the value of the ROOM_BOOK edge.
        items:
          $ref: '#/definitions/ent.Book'
        type: array
      roominfo:
        $ref: '#/definitions/ent.RoomInfo'
        description: ROOMINFO holds the value of the ROOM_INFO edge.
        type: object
      roomroomtype:
        $ref: '#/definitions/ent.RoomType'
        description: ROOMROOMTYPE holds the value of the ROOM_ROOMTYPE edge.
        type: object
      roomstatus:
        $ref: '#/definitions/ent.RoomStatus'
        description: ROOMSTATUS holds the value of the ROOM_STATUS edge.
        type: object
    type: object
  ent.RoomInfo:
    properties:
      INFOBED:
        description: INFOBED holds the value of the "INFOBED" field.
        type: integer
      INFOOFFICEDE:
        description: INFOOFFICEDE holds the value of the "INFOOFFICEDE" field.
        type: integer
      INFOREFRIGERAT:
        description: INFOREFRIGERAT holds the value of the "INFOREFRIGERAT" field.
        type: integer
      INFOWARDROB:
        description: INFOWARDROB holds the value of the "INFOWARDROB" field.
        type: integer
      edges:
        $ref: '#/definitions/ent.RoomInfoEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoomInfoQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoomInfoEdges:
    properties:
      inforoom:
        description: INFOROOM holds the value of the INFO_ROOM edge.
        items:
          $ref: '#/definitions/ent.Room'
        type: array
    type: object
  ent.RoomStatus:
    properties:
      STATUSDATA:
        description: STATUSDATA holds the value of the "STATUSDATA" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoomStatusEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoomStatusQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoomStatusEdges:
    properties:
      statusroom:
        description: STATUSROOM holds the value of the STATUS_ROOM edge.
        items:
          $ref: '#/definitions/ent.Room'
        type: array
    type: object
  ent.RoomType:
    properties:
      COSTDATA:
        description: COSTDATA holds the value of the "COSTDATA" field.
        type: integer
      ROOMTYPEDATA:
        description: ROOMTYPEDATA holds the value of the "ROOMTYPEDATA" field.
        type: string
      edges:
        $ref: '#/definitions/ent.RoomTypeEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the RoomTypeQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.RoomTypeEdges:
    properties:
      roomtyperoom:
        description: ROOMTYPEROOM holds the value of the ROOMTYPE_ROOM edge.
        items:
          $ref: '#/definitions/ent.Room'
        type: array
    type: object
  ent.User:
    properties:
      USEREMAIL:
        description: USEREMAIL holds the value of the "USEREMAIL" field.
        type: string
      USERNAME:
        description: USERNAME holds the value of the "USERNAME" field.
        type: string
      edges:
        $ref: '#/definitions/ent.UserEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.UserEdges:
    properties:
      userbook:
        description: USERBOOK holds the value of the USER_BOOK edge.
        items:
          $ref: '#/definitions/ent.Book'
        type: array
      useruserstatus:
        $ref: '#/definitions/ent.UserStatus'
        description: USERUSERSTATUS holds the value of the USER_USERSTATUS edge.
        type: object
    type: object
  ent.UserStatus:
    properties:
      STATUS:
        description: STATUS holds the value of the "STATUS" field.
        type: string
      edges:
        $ref: '#/definitions/ent.UserStatusEdges'
        description: |-
          Edges holds the relations/edges for other nodes in the graph.
          The values are being populated by the UserStatusQuery when eager-loading is set.
        type: object
      id:
        description: ID of the ent.
        type: integer
    type: object
  ent.UserStatusEdges:
    properties:
      userstatususer:
        description: USERSTATUSUSER holds the value of the USERSTATUS_USER edge.
        items:
          $ref: '#/definitions/ent.User'
        type: array
    type: object
  gin.H:
    additionalProperties: true
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server for SUT SE 2563
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SUT SA Example API
  version: "1.0"
paths:
  /book:
    get:
      description: list book entities
      operationId: list-book
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List book entities
    post:
      consumes:
      - application/json
      description: Create book
      operationId: create-book
      parameters:
      - description: Book entity
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/controllers.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create book
  /book/{id}:
    delete:
      description: get book by ID
      operationId: delete-book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a book entity by ID
    get:
      description: get book by ID
      operationId: get-book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a book entity by ID
    put:
      consumes:
      - application/json
      description: update book by ID
      operationId: update-book
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      - description: Book entity
        in: body
        name: Book
        required: true
        schema:
          $ref: '#/definitions/ent.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a book entity by ID
  /bookstatus:
    get:
      description: list bookstatus entities
      operationId: list-bookstatus
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Bookstatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List bookstatus entities
    post:
      consumes:
      - application/json
      description: Create bookstatus
      operationId: create-bookstatus
      parameters:
      - description: Bookstatus entity
        in: body
        name: bookstatus
        required: true
        schema:
          $ref: '#/definitions/ent.Bookstatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bookstatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create bookstatus
  /bookstatus/{id}:
    delete:
      description: get bookstatus by ID
      operationId: delete-bookstatus
      parameters:
      - description: Bookstatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a bookstatus entity by ID
    get:
      description: get bookstatus by ID
      operationId: get-bookstatus
      parameters:
      - description: Bookstatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bookstatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a bookstatus entity by ID
    put:
      consumes:
      - application/json
      description: update bookstatus by ID
      operationId: update-bookstatus
      parameters:
      - description: Bookstatus ID
        in: path
        name: id
        required: true
        type: integer
      - description: Bookstatus entity
        in: body
        name: Bookstatus
        required: true
        schema:
          $ref: '#/definitions/ent.Bookstatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Bookstatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a bookstatus entity by ID
  /room:
    get:
      description: list room entities
      operationId: list-room
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.Room'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List room entities
    post:
      consumes:
      - application/json
      description: Create room
      operationId: create-room
      parameters:
      - description: Room entity
        in: body
        name: room
        required: true
        schema:
          $ref: '#/definitions/ent.Room'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create room
  /room/{id}:
    delete:
      description: get room by ID
      operationId: delete-room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a room entity by ID
    get:
      description: get room by ID
      operationId: get-room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a room entity by ID
    put:
      consumes:
      - application/json
      description: update room by ID
      operationId: update-room
      parameters:
      - description: Room ID
        in: path
        name: id
        required: true
        type: integer
      - description: Room entity
        in: body
        name: Room
        required: true
        schema:
          $ref: '#/definitions/ent.Room'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.Room'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a room entity by ID
  /roominfo:
    get:
      description: list roominfo entities
      operationId: list-roominfo
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RoomInfo'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List roominfo entities
    post:
      consumes:
      - application/json
      description: Create roominfo
      operationId: create-roominfo
      parameters:
      - description: RoomInfo entity
        in: body
        name: roominfo
        required: true
        schema:
          $ref: '#/definitions/ent.RoomInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create roominfo
  /roominfo/{id}:
    delete:
      description: get roominfo by ID
      operationId: delete-roominfo
      parameters:
      - description: RoomInfo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a roominfo entity by ID
    get:
      description: get roominfo by ID
      operationId: get-roominfo
      parameters:
      - description: RoomInfo ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a roominfo entity by ID
    put:
      consumes:
      - application/json
      description: update roominfo by ID
      operationId: update-roominfo
      parameters:
      - description: RoomInfo ID
        in: path
        name: id
        required: true
        type: integer
      - description: RoomInfo entity
        in: body
        name: RoomInfo
        required: true
        schema:
          $ref: '#/definitions/ent.RoomInfo'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomInfo'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a roominfo entity by ID
  /roomstatus:
    get:
      description: list roomstatus entities
      operationId: list-roomstatus
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RoomStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List roomstatus entities
    post:
      consumes:
      - application/json
      description: Create roomstatus
      operationId: create-roomstatus
      parameters:
      - description: RoomStatus entity
        in: body
        name: roomstatus
        required: true
        schema:
          $ref: '#/definitions/ent.RoomStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create roomstatus
  /roomstatus/{id}:
    delete:
      description: get roomstatus by ID
      operationId: delete-roomstatus
      parameters:
      - description: RoomStatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a roomstatus entity by ID
    get:
      description: get roomstatus by ID
      operationId: get-roomstatus
      parameters:
      - description: RoomStatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a roomstatus entity by ID
    put:
      consumes:
      - application/json
      description: update roomstatus by ID
      operationId: update-roomstatus
      parameters:
      - description: RoomStatus ID
        in: path
        name: id
        required: true
        type: integer
      - description: RoomStatus entity
        in: body
        name: RoomStatus
        required: true
        schema:
          $ref: '#/definitions/ent.RoomStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a roomstatus entity by ID
  /roomtype:
    get:
      description: list roomtype entities
      operationId: list-roomtype
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.RoomType'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List roomtype entities
    post:
      consumes:
      - application/json
      description: Create roomtype
      operationId: create-roomtype
      parameters:
      - description: RoomType entity
        in: body
        name: roomtype
        required: true
        schema:
          $ref: '#/definitions/ent.RoomType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create roomtype
  /roomtype/{id}:
    delete:
      description: get roomtype by ID
      operationId: delete-roomtype
      parameters:
      - description: RoomType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a roomtype entity by ID
    get:
      description: get roomtype by ID
      operationId: get-roomtype
      parameters:
      - description: RoomType ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a roomtype entity by ID
    put:
      consumes:
      - application/json
      description: update roomtype by ID
      operationId: update-roomtype
      parameters:
      - description: RoomType ID
        in: path
        name: id
        required: true
        type: integer
      - description: RoomType entity
        in: body
        name: RoomType
        required: true
        schema:
          $ref: '#/definitions/ent.RoomType'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.RoomType'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a roomtype entity by ID
  /user:
    get:
      description: list user entities
      operationId: list-user
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List user entities
    post:
      consumes:
      - application/json
      description: Create user
      operationId: create-user
      parameters:
      - description: User entity
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create user
  /user/{id}:
    delete:
      description: get user by ID
      operationId: delete-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a user entity by ID
    get:
      description: get user by ID
      operationId: get-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a user entity by ID
    put:
      consumes:
      - application/json
      description: update user by ID
      operationId: update-user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User entity
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/ent.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a user entity by ID
  /userstatus:
    get:
      description: list userstatus entities
      operationId: list-userstatus
      parameters:
      - description: Limit
        in: query
        name: limit
        type: integer
      - description: Offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ent.UserStatus'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: List userstatus entities
    post:
      consumes:
      - application/json
      description: Create userstatus
      operationId: create-userstatus
      parameters:
      - description: UserStatus entity
        in: body
        name: userstatus
        required: true
        schema:
          $ref: '#/definitions/ent.UserStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.UserStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Create userstatus
  /userstatus/{id}:
    delete:
      description: get userstatus by ID
      operationId: delete-userstatus
      parameters:
      - description: UserStatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Delete a userstatus entity by ID
    get:
      description: get userstatus by ID
      operationId: get-userstatus
      parameters:
      - description: UserStatus ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.UserStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get a userstatus entity by ID
    put:
      consumes:
      - application/json
      description: update userstatus by ID
      operationId: update-userstatus
      parameters:
      - description: UserStatus ID
        in: path
        name: id
        required: true
        type: integer
      - description: UserStatus entity
        in: body
        name: UserStatus
        required: true
        schema:
          $ref: '#/definitions/ent.UserStatus'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ent.UserStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Update a userstatus entity by ID
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
  OAuth2AccessCode:
    authorizationUrl: https://example.com/oauth/authorize
    flow: accessCode
    scopes:
      admin: ' Grants read and write access to administrative information'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Application:
    flow: application
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
  OAuth2Implicit:
    authorizationUrl: https://example.com/oauth/authorize
    flow: implicit
    scopes:
      admin: ' Grants read and write access to administrative information'
      write: ' Grants write access'
    type: oauth2
  OAuth2Password:
    flow: password
    scopes:
      admin: ' Grants read and write access to administrative information'
      read: ' Grants read access'
      write: ' Grants write access'
    tokenUrl: https://example.com/oauth/token
    type: oauth2
swagger: "2.0"
