/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersBook,
    ControllersBookFromJSON,
    ControllersBookToJSON,
    EntBook,
    EntBookFromJSON,
    EntBookToJSON,
    EntBookstatus,
    EntBookstatusFromJSON,
    EntBookstatusToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntRoomInfo,
    EntRoomInfoFromJSON,
    EntRoomInfoToJSON,
    EntRoomStatus,
    EntRoomStatusFromJSON,
    EntRoomStatusToJSON,
    EntRoomType,
    EntRoomTypeFromJSON,
    EntRoomTypeToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
    EntUserStatus,
    EntUserStatusFromJSON,
    EntUserStatusToJSON,
} from '../models';

export interface CreateBookRequest {
    book: ControllersBook;
}

export interface CreateBookstatusRequest {
    bookstatus: EntBookstatus;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface CreateRoominfoRequest {
    roominfo: EntRoomInfo;
}

export interface CreateRoomstatusRequest {
    roomstatus: EntRoomStatus;
}

export interface CreateRoomtypeRequest {
    roomtype: EntRoomType;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface CreateUserstatusRequest {
    userstatus: EntUserStatus;
}

export interface DeleteBookRequest {
    id: number;
}

export interface DeleteBookstatusRequest {
    id: number;
}

export interface DeleteRoomRequest {
    id: number;
}

export interface DeleteRoominfoRequest {
    id: number;
}

export interface DeleteRoomstatusRequest {
    id: number;
}

export interface DeleteRoomtypeRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface DeleteUserstatusRequest {
    id: number;
}

export interface GetBookRequest {
    id: number;
}

export interface GetBookstatusRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetRoominfoRequest {
    id: number;
}

export interface GetRoomstatusRequest {
    id: number;
}

export interface GetRoomtypeRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface GetUserstatusRequest {
    id: number;
}

export interface ListBookRequest {
    limit?: number;
    offset?: number;
}

export interface ListBookstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoominfoRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomstatusRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserstatusRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateBookRequest {
    id: number;
    book: EntBook;
}

export interface UpdateBookstatusRequest {
    id: number;
    bookstatus: EntBookstatus;
}

export interface UpdateRoomRequest {
    id: number;
    room: EntRoom;
}

export interface UpdateRoominfoRequest {
    id: number;
    roomInfo: EntRoomInfo;
}

export interface UpdateRoomstatusRequest {
    id: number;
    roomStatus: EntRoomStatus;
}

export interface UpdateRoomtypeRequest {
    id: number;
    roomType: EntRoomType;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

export interface UpdateUserstatusRequest {
    id: number;
    userStatus: EntUserStatus;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create book
     * Create book
     */
    async createBookRaw(requestParameters: CreateBookRequest): Promise<runtime.ApiResponse<EntBook>> {
        if (requestParameters.book === null || requestParameters.book === undefined) {
            throw new runtime.RequiredError('book','Required parameter requestParameters.book was null or undefined when calling createBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/book`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersBookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookFromJSON(jsonValue));
    }

    /**
     * Create book
     * Create book
     */
    async createBook(requestParameters: CreateBookRequest): Promise<EntBook> {
        const response = await this.createBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bookstatus
     * Create bookstatus
     */
    async createBookstatusRaw(requestParameters: CreateBookstatusRequest): Promise<runtime.ApiResponse<EntBookstatus>> {
        if (requestParameters.bookstatus === null || requestParameters.bookstatus === undefined) {
            throw new runtime.RequiredError('bookstatus','Required parameter requestParameters.bookstatus was null or undefined when calling createBookstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBookstatusToJSON(requestParameters.bookstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookstatusFromJSON(jsonValue));
    }

    /**
     * Create bookstatus
     * Create bookstatus
     */
    async createBookstatus(requestParameters: CreateBookstatusRequest): Promise<EntBookstatus> {
        const response = await this.createBookstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/room`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roominfo
     * Create roominfo
     */
    async createRoominfoRaw(requestParameters: CreateRoominfoRequest): Promise<runtime.ApiResponse<EntRoomInfo>> {
        if (requestParameters.roominfo === null || requestParameters.roominfo === undefined) {
            throw new runtime.RequiredError('roominfo','Required parameter requestParameters.roominfo was null or undefined when calling createRoominfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roominfo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomInfoToJSON(requestParameters.roominfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomInfoFromJSON(jsonValue));
    }

    /**
     * Create roominfo
     * Create roominfo
     */
    async createRoominfo(requestParameters: CreateRoominfoRequest): Promise<EntRoomInfo> {
        const response = await this.createRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomstatus
     * Create roomstatus
     */
    async createRoomstatusRaw(requestParameters: CreateRoomstatusRequest): Promise<runtime.ApiResponse<EntRoomStatus>> {
        if (requestParameters.roomstatus === null || requestParameters.roomstatus === undefined) {
            throw new runtime.RequiredError('roomstatus','Required parameter requestParameters.roomstatus was null or undefined when calling createRoomstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomStatusToJSON(requestParameters.roomstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomStatusFromJSON(jsonValue));
    }

    /**
     * Create roomstatus
     * Create roomstatus
     */
    async createRoomstatus(requestParameters: CreateRoomstatusRequest): Promise<EntRoomStatus> {
        const response = await this.createRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtypeRaw(requestParameters: CreateRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomType>> {
        if (requestParameters.roomtype === null || requestParameters.roomtype === undefined) {
            throw new runtime.RequiredError('roomtype','Required parameter requestParameters.roomtype was null or undefined when calling createRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomtype`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomTypeToJSON(requestParameters.roomtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomTypeFromJSON(jsonValue));
    }

    /**
     * Create roomtype
     * Create roomtype
     */
    async createRoomtype(requestParameters: CreateRoomtypeRequest): Promise<EntRoomType> {
        const response = await this.createRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create userstatus
     * Create userstatus
     */
    async createUserstatusRaw(requestParameters: CreateUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.userstatus === null || requestParameters.userstatus === undefined) {
            throw new runtime.RequiredError('userstatus','Required parameter requestParameters.userstatus was null or undefined when calling createUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userstatus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserStatusToJSON(requestParameters.userstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * Create userstatus
     * Create userstatus
     */
    async createUserstatus(requestParameters: CreateUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.createUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get book by ID
     * Delete a book entity by ID
     */
    async deleteBookRaw(requestParameters: DeleteBookRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/book/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get book by ID
     * Delete a book entity by ID
     */
    async deleteBook(requestParameters: DeleteBookRequest): Promise<object> {
        const response = await this.deleteBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookstatus by ID
     * Delete a bookstatus entity by ID
     */
    async deleteBookstatusRaw(requestParameters: DeleteBookstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBookstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bookstatus by ID
     * Delete a bookstatus entity by ID
     */
    async deleteBookstatus(requestParameters: DeleteBookstatusRequest): Promise<object> {
        const response = await this.deleteBookstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoomRaw(requestParameters: DeleteRoomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/room/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoom(requestParameters: DeleteRoomRequest): Promise<object> {
        const response = await this.deleteRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roominfo by ID
     * Delete a roominfo entity by ID
     */
    async deleteRoominfoRaw(requestParameters: DeleteRoominfoRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoominfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roominfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get roominfo by ID
     * Delete a roominfo entity by ID
     */
    async deleteRoominfo(requestParameters: DeleteRoominfoRequest): Promise<object> {
        const response = await this.deleteRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomstatus by ID
     * Delete a roomstatus entity by ID
     */
    async deleteRoomstatusRaw(requestParameters: DeleteRoomstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoomstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get roomstatus by ID
     * Delete a roomstatus entity by ID
     */
    async deleteRoomstatus(requestParameters: DeleteRoomstatusRequest): Promise<object> {
        const response = await this.deleteRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomtype by ID
     * Delete a roomtype entity by ID
     */
    async deleteRoomtypeRaw(requestParameters: DeleteRoomtypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get roomtype by ID
     * Delete a roomtype entity by ID
     */
    async deleteRoomtype(requestParameters: DeleteRoomtypeRequest): Promise<object> {
        const response = await this.deleteRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get userstatus by ID
     * Delete a userstatus entity by ID
     */
    async deleteUserstatusRaw(requestParameters: DeleteUserstatusRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get userstatus by ID
     * Delete a userstatus entity by ID
     */
    async deleteUserstatus(requestParameters: DeleteUserstatusRequest): Promise<object> {
        const response = await this.deleteUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get book by ID
     * Get a book entity by ID
     */
    async getBookRaw(requestParameters: GetBookRequest): Promise<runtime.ApiResponse<EntBook>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/book/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookFromJSON(jsonValue));
    }

    /**
     * get book by ID
     * Get a book entity by ID
     */
    async getBook(requestParameters: GetBookRequest): Promise<EntBook> {
        const response = await this.getBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bookstatus by ID
     * Get a bookstatus entity by ID
     */
    async getBookstatusRaw(requestParameters: GetBookstatusRequest): Promise<runtime.ApiResponse<EntBookstatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBookstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookstatusFromJSON(jsonValue));
    }

    /**
     * get bookstatus by ID
     * Get a bookstatus entity by ID
     */
    async getBookstatus(requestParameters: GetBookstatusRequest): Promise<EntBookstatus> {
        const response = await this.getBookstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/room/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roominfo by ID
     * Get a roominfo entity by ID
     */
    async getRoominfoRaw(requestParameters: GetRoominfoRequest): Promise<runtime.ApiResponse<EntRoomInfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoominfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roominfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomInfoFromJSON(jsonValue));
    }

    /**
     * get roominfo by ID
     * Get a roominfo entity by ID
     */
    async getRoominfo(requestParameters: GetRoominfoRequest): Promise<EntRoomInfo> {
        const response = await this.getRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomstatus by ID
     * Get a roomstatus entity by ID
     */
    async getRoomstatusRaw(requestParameters: GetRoomstatusRequest): Promise<runtime.ApiResponse<EntRoomStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomStatusFromJSON(jsonValue));
    }

    /**
     * get roomstatus by ID
     * Get a roomstatus entity by ID
     */
    async getRoomstatus(requestParameters: GetRoomstatusRequest): Promise<EntRoomStatus> {
        const response = await this.getRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtypeRaw(requestParameters: GetRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomTypeFromJSON(jsonValue));
    }

    /**
     * get roomtype by ID
     * Get a roomtype entity by ID
     */
    async getRoomtype(requestParameters: GetRoomtypeRequest): Promise<EntRoomType> {
        const response = await this.getRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get userstatus by ID
     * Get a userstatus entity by ID
     */
    async getUserstatusRaw(requestParameters: GetUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * get userstatus by ID
     * Get a userstatus entity by ID
     */
    async getUserstatus(requestParameters: GetUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.getUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list book entities
     * List book entities
     */
    async listBookRaw(requestParameters: ListBookRequest): Promise<runtime.ApiResponse<Array<EntBook>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/book`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookFromJSON));
    }

    /**
     * list book entities
     * List book entities
     */
    async listBook(requestParameters: ListBookRequest): Promise<Array<EntBook>> {
        const response = await this.listBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bookstatus entities
     * List bookstatus entities
     */
    async listBookstatusRaw(requestParameters: ListBookstatusRequest): Promise<runtime.ApiResponse<Array<EntBookstatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bookstatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBookstatusFromJSON));
    }

    /**
     * list bookstatus entities
     * List bookstatus entities
     */
    async listBookstatus(requestParameters: ListBookstatusRequest): Promise<Array<EntBookstatus>> {
        const response = await this.listBookstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/room`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roominfo entities
     * List roominfo entities
     */
    async listRoominfoRaw(requestParameters: ListRoominfoRequest): Promise<runtime.ApiResponse<Array<EntRoomInfo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roominfo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomInfoFromJSON));
    }

    /**
     * list roominfo entities
     * List roominfo entities
     */
    async listRoominfo(requestParameters: ListRoominfoRequest): Promise<Array<EntRoomInfo>> {
        const response = await this.listRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomstatus entities
     * List roomstatus entities
     */
    async listRoomstatusRaw(requestParameters: ListRoomstatusRequest): Promise<runtime.ApiResponse<Array<EntRoomStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomstatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomStatusFromJSON));
    }

    /**
     * list roomstatus entities
     * List roomstatus entities
     */
    async listRoomstatus(requestParameters: ListRoomstatusRequest): Promise<Array<EntRoomStatus>> {
        const response = await this.listRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtypeRaw(requestParameters: ListRoomtypeRequest): Promise<runtime.ApiResponse<Array<EntRoomType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/roomtype`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomTypeFromJSON));
    }

    /**
     * list roomtype entities
     * List roomtype entities
     */
    async listRoomtype(requestParameters: ListRoomtypeRequest): Promise<Array<EntRoomType>> {
        const response = await this.listRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatusRaw(requestParameters: ListUserstatusRequest): Promise<runtime.ApiResponse<Array<EntUserStatus>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/userstatus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserStatusFromJSON));
    }

    /**
     * list userstatus entities
     * List userstatus entities
     */
    async listUserstatus(requestParameters: ListUserstatusRequest): Promise<Array<EntUserStatus>> {
        const response = await this.listUserstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update book by ID
     * Update a book entity by ID
     */
    async updateBookRaw(requestParameters: UpdateBookRequest): Promise<runtime.ApiResponse<EntBook>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBook.');
        }

        if (requestParameters.book === null || requestParameters.book === undefined) {
            throw new runtime.RequiredError('book','Required parameter requestParameters.book was null or undefined when calling updateBook.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/book/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookFromJSON(jsonValue));
    }

    /**
     * update book by ID
     * Update a book entity by ID
     */
    async updateBook(requestParameters: UpdateBookRequest): Promise<EntBook> {
        const response = await this.updateBookRaw(requestParameters);
        return await response.value();
    }

    /**
     * update bookstatus by ID
     * Update a bookstatus entity by ID
     */
    async updateBookstatusRaw(requestParameters: UpdateBookstatusRequest): Promise<runtime.ApiResponse<EntBookstatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBookstatus.');
        }

        if (requestParameters.bookstatus === null || requestParameters.bookstatus === undefined) {
            throw new runtime.RequiredError('bookstatus','Required parameter requestParameters.bookstatus was null or undefined when calling updateBookstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bookstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBookstatusToJSON(requestParameters.bookstatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBookstatusFromJSON(jsonValue));
    }

    /**
     * update bookstatus by ID
     * Update a bookstatus entity by ID
     */
    async updateBookstatus(requestParameters: UpdateBookstatusRequest): Promise<EntBookstatus> {
        const response = await this.updateBookstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoomRaw(requestParameters: UpdateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoom.');
        }

        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling updateRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/room/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoom(requestParameters: UpdateRoomRequest): Promise<EntRoom> {
        const response = await this.updateRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roominfo by ID
     * Update a roominfo entity by ID
     */
    async updateRoominfoRaw(requestParameters: UpdateRoominfoRequest): Promise<runtime.ApiResponse<EntRoomInfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoominfo.');
        }

        if (requestParameters.roomInfo === null || requestParameters.roomInfo === undefined) {
            throw new runtime.RequiredError('roomInfo','Required parameter requestParameters.roomInfo was null or undefined when calling updateRoominfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roominfo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomInfoToJSON(requestParameters.roomInfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomInfoFromJSON(jsonValue));
    }

    /**
     * update roominfo by ID
     * Update a roominfo entity by ID
     */
    async updateRoominfo(requestParameters: UpdateRoominfoRequest): Promise<EntRoomInfo> {
        const response = await this.updateRoominfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roomstatus by ID
     * Update a roomstatus entity by ID
     */
    async updateRoomstatusRaw(requestParameters: UpdateRoomstatusRequest): Promise<runtime.ApiResponse<EntRoomStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoomstatus.');
        }

        if (requestParameters.roomStatus === null || requestParameters.roomStatus === undefined) {
            throw new runtime.RequiredError('roomStatus','Required parameter requestParameters.roomStatus was null or undefined when calling updateRoomstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomStatusToJSON(requestParameters.roomStatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomStatusFromJSON(jsonValue));
    }

    /**
     * update roomstatus by ID
     * Update a roomstatus entity by ID
     */
    async updateRoomstatus(requestParameters: UpdateRoomstatusRequest): Promise<EntRoomStatus> {
        const response = await this.updateRoomstatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * update roomtype by ID
     * Update a roomtype entity by ID
     */
    async updateRoomtypeRaw(requestParameters: UpdateRoomtypeRequest): Promise<runtime.ApiResponse<EntRoomType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoomtype.');
        }

        if (requestParameters.roomType === null || requestParameters.roomType === undefined) {
            throw new runtime.RequiredError('roomType','Required parameter requestParameters.roomType was null or undefined when calling updateRoomtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/roomtype/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomTypeToJSON(requestParameters.roomType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomTypeFromJSON(jsonValue));
    }

    /**
     * update roomtype by ID
     * Update a roomtype entity by ID
     */
    async updateRoomtype(requestParameters: UpdateRoomtypeRequest): Promise<EntRoomType> {
        const response = await this.updateRoomtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatusRaw(requestParameters: UpdateUserstatusRequest): Promise<runtime.ApiResponse<EntUserStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUserstatus.');
        }

        if (requestParameters.userStatus === null || requestParameters.userStatus === undefined) {
            throw new runtime.RequiredError('userStatus','Required parameter requestParameters.userStatus was null or undefined when calling updateUserstatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/userstatus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserStatusToJSON(requestParameters.userStatus),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserStatusFromJSON(jsonValue));
    }

    /**
     * update userstatus by ID
     * Update a userstatus entity by ID
     */
    async updateUserstatus(requestParameters: UpdateUserstatusRequest): Promise<EntUserStatus> {
        const response = await this.updateUserstatusRaw(requestParameters);
        return await response.value();
    }

}
